{"compilerOptions":{"css":"external","dev":true,"hmr":true},"configFile":false,"extensions":[".svelte"],"preprocess":[{"name":"vite-preprocess","style":"async ({ attributes, content, filename = '' }) => {\n\t\tconst ext = attributes.lang ? `.${attributes.lang}` : '.css';\n\t\tif (attributes.lang && !isCSSRequest(ext)) return;\n\t\tif (!cssTransform) {\n\t\t\tcssTransform = createCssTransform(style, config).then((t) => (cssTransform = t));\n\t\t}\n\t\tconst transform = await cssTransform;\n\t\tconst suffix = `${lang_sep}${ext}`;\n\t\tconst moduleId = `${filename}${suffix}`;\n\t\tconst { code, map, deps } = await transform(content, moduleId);\n\t\tremoveLangSuffix(map, suffix);\n\t\tmapToRelative(map, filename);\n\t\tconst dependencies = deps ? Array.from(deps).filter((d) => !d.endsWith(suffix)) : undefined;\n\t\treturn {\n\t\t\tcode,\n\t\t\tmap: map ?? undefined,\n\t\t\tdependencies\n\t\t};\n\t}"},{"name":"debug","script":"({ content, filename }) => {\n      // Don't overwrite the shim, only consider files in a src directory, and\n      // don't consider library files.\n      if (\n        !filename.includes(\"logger.ts\") &&\n        filename.includes(\"src\") &&\n        !filename.includes(\"node_modules\")\n      ) {\n        // Extract relevant part of filename.\n        const src_idx = filename.indexOf(\"src\");\n        const file = filename.substr(src_idx);\n        let out = \"\";\n        // Keep track of line number to print out. (one indexed)\n        let line_count = 1;\n        // Search for this debug_log string.\n        const target = \"debug_log(\";\n        while (true) {\n          let start = content.indexOf(target);\n          if (start == -1) {\n            out += content;\n            break;\n          }\n          // Find matching parentheses. Will work if there are nested parentheses in\n          // the expressions, but will not handle escaped parentheses correctly.\n          const end = find_matching_paren_index(\n            content.substr(start + target.length),\n          );\n          if (end == -1) {\n            out += content;\n            break;\n          }\n          out += content.substr(0, start);\n          const window = content.substr(start + target.length, end);\n          const lines = (\n            content.substr(0, start + target.length + end).match(/\\n/g) || \"\"\n          ).length;\n          line_count += lines;\n          // Escape quotes in the expression.\n          const expr = window.replaceAll('\"', '\\\\\"');\n          // Use JSON.parse and JSON.stringify to freeze the current value and log it.\n          // Terrible performance, but this is for debugging only.\n          out += `console.debug(\"${file}:${line_count}\\\\n\",\"DEBUG: ${expr}\\\\n\", ...[${window}].map(v => JSON.parse(JSON.stringify(v)))`;\n          content = content.substr(start + target.length + end);\n        }\n\n        return { code: out };\n      } else {\n        return { code: content };\n      }\n    }"},{"script":"({ content, filename }) => {\n\t\tif (!filename) return;\n\n\t\tconst basename = path.basename(filename);\n\t\tif (basename.startsWith('+page.') || basename.startsWith('+layout.')) {\n\t\t\tconst match = content.match(options_regex);\n\t\t\tif (match) {\n\t\t\t\tconst fixed = basename.replace('.svelte', '(.server).js/ts');\n\n\t\t\t\tconst message =\n\t\t\t\t\t`\\n${colors.bold().red(path.relative('.', filename))}\\n` +\n\t\t\t\t\t`\\`${match[1]}\\` will be ignored — move it to ${fixed} instead. See https://svelte.dev/docs/kit/page-options for more information.`;\n\n\t\t\t\tif (!warned.has(message)) {\n\t\t\t\t\tconsole.log(message);\n\t\t\t\t\twarned.add(message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","markup":"({ content, filename }) => {\n\t\tif (!filename) return;\n\n\t\tconst basename = path.basename(filename);\n\t\tconst has_children =\n\t\t\tcontent.includes('<slot') || (isSvelte5Plus() && content.includes('{@render'));\n\n\t\tif (basename.startsWith('+layout.') && !has_children) {\n\t\t\tconst message =\n\t\t\t\t`\\n${colors.bold().red(path.relative('.', filename))}\\n` +\n\t\t\t\t`\\`<slot />\\`${isSvelte5Plus() ? ' or `{@render ...}` tag' : ''}` +\n\t\t\t\t' missing — inner content will not be rendered';\n\n\t\t\tif (!warned.has(message)) {\n\t\t\t\tconsole.log(message);\n\t\t\t\twarned.add(message);\n\t\t\t}\n\t\t}\n\t}"}]}