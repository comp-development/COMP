{
  "version": 3,
  "sources": ["../../asciimath2tex/asciimath2tex.js"],
  "sourcesContent": ["export default class AsciiMathParser {\n    constructor() {\n        this.decimalsign = '\\\\.';\n\n        this.setup_symbols();\n        this.sort_symbols();\n    }\n\n    setup_symbols() {\n        this.greek_letters = ['alpha', 'beta', 'gamma', 'Gamma', 'delta', 'Delta', 'epsilon', 'varepsilon', 'zeta', 'eta', 'theta', 'Theta', 'vartheta', 'iota', 'kappa', 'lambda', 'Lambda', 'mu', 'nu', 'xi', 'Xi', 'pi', 'Pi', 'rho', 'sigma', 'Sigma', 'tau', 'upsilon', 'phi', 'Phi', 'varphi', 'chi', 'psi', 'Psi', 'omega', 'Omega'];\n\n        this.relations = [\n            {\"asciimath\":\":=\",\"tex\":\":=\"},\n            {\"asciimath\":\":|:\",\"tex\":\"\\\\mid\"},\n            {\"asciimath\":\"=>\",\"tex\":\"\\\\Rightarrow\"},\n            {\"asciimath\":\"approx\",\"tex\":\"\\\\approx\"},\n            {\"asciimath\":\"~~\",\"tex\":\"\\\\approx\"},\n            {\"asciimath\":\"cong\",\"tex\":\"\\\\cong\"},\n            {\"asciimath\":\"~=\",\"tex\":\"\\\\cong\"},\n            {\"asciimath\":\"equiv\",\"tex\":\"\\\\equiv\"},\n            {\"asciimath\":\"-=\",\"tex\":\"\\\\equiv\"},\n            {\"asciimath\":\"exists\",\"tex\":\"\\\\exists\"},\n            {\"asciimath\":\"EE\",\"tex\":\"\\\\exists\"},\n            {\"asciimath\":\"forall\",\"tex\":\"\\\\forall\"},\n            {\"asciimath\":\"AA\",\"tex\":\"\\\\forall\"},\n            {\"asciimath\":\">=\",\"tex\":\"\\\\ge\"},\n            {\"asciimath\":\"ge\",\"tex\":\"\\\\ge\"},\n            {\"asciimath\":\"gt=\",\"tex\":\"\\\\geq\"},\n            {\"asciimath\":\"geq\",\"tex\":\"\\\\geq\"},\n            {\"asciimath\":\"gt\",\"tex\":\"\\\\gt\"},\n            {\"asciimath\":\"in\",\"tex\":\"\\\\in\"},\n            {\"asciimath\":\"<=\",\"tex\":\"\\\\le\"},\n            {\"asciimath\":\"le\",\"tex\":\"\\\\le\"},\n            {\"asciimath\":\"lt=\",\"tex\":\"\\\\leq\"},\n            {\"asciimath\":\"leq\",\"tex\":\"\\\\leq\"},\n            {\"asciimath\":\"lt\",\"tex\":\"\\\\lt\"},\n            {\"asciimath\":\"models\",\"tex\":\"\\\\models\"},\n            {\"asciimath\":\"|==\",\"tex\":\"\\\\models\"},\n            {\"asciimath\":\"!=\",\"tex\":\"\\\\ne\"},\n            {\"asciimath\":\"ne\",\"tex\":\"\\\\ne\"},\n            {\"asciimath\":\"notin\",\"tex\":\"\\\\notin\"},\n            {\"asciimath\":\"!in\",\"tex\":\"\\\\notin\"},\n            {\"asciimath\":\"prec\",\"tex\":\"\\\\prec\"},\n            {\"asciimath\":\"-lt\",\"tex\":\"\\\\prec\"},\n            {\"asciimath\":\"-<\",\"tex\":\"\\\\prec\"},\n            {\"asciimath\":\"preceq\",\"tex\":\"\\\\preceq\"},\n            {\"asciimath\":\"-<=\",\"tex\":\"\\\\preceq\"},\n            {\"asciimath\":\"propto\",\"tex\":\"\\\\propto\"},\n            {\"asciimath\":\"prop\",\"tex\":\"\\\\propto\"},\n            {\"asciimath\":\"subset\",\"tex\":\"\\\\subset\"},\n            {\"asciimath\":\"sub\",\"tex\":\"\\\\subset\"},\n            {\"asciimath\":\"subseteq\",\"tex\":\"\\\\subseteq\"},\n            {\"asciimath\":\"sube\",\"tex\":\"\\\\subseteq\"},\n            {\"asciimath\":\"succ\",\"tex\":\"\\\\succ\"},\n            {\"asciimath\":\">-\",\"tex\":\"\\\\succ\"},\n            {\"asciimath\":\"succeq\",\"tex\":\"\\\\succeq\"},\n            {\"asciimath\":\">-=\",\"tex\":\"\\\\succeq\"},\n            {\"asciimath\":\"supset\",\"tex\":\"\\\\supset\"},\n            {\"asciimath\":\"sup\",\"tex\":\"\\\\supset\"},\n            {\"asciimath\":\"supseteq\",\"tex\":\"\\\\supseteq\"},\n            {\"asciimath\":\"supe\",\"tex\":\"\\\\supseteq\"},\n            {\"asciimath\":\"vdash\",\"tex\":\"\\\\vdash\"},\n            {\"asciimath\":\"|--\",\"tex\":\"\\\\vdash\"},\n        ]\n\n        this.constants = [\n            {\"asciimath\":\"dt\",\"tex\":\"dt\"},\n            {\"asciimath\":\"dx\",\"tex\":\"dx\"},\n            {\"asciimath\":\"dy\",\"tex\":\"dy\"},\n            {\"asciimath\":\"dz\",\"tex\":\"dz\"},\n            {\"asciimath\":\"prime\",\"tex\":\"'\"},\n            {\"asciimath\":\"implies\",\"tex\":\"\\\\implies\"},\n            {\"asciimath\":\"epsi\",\"tex\":\"\\\\epsilon\"},\n            {\"asciimath\":\"leftrightarrow\",\"tex\":\"\\\\leftrightarrow\"},\n            {\"asciimath\":\"Leftrightarrow\",\"tex\":\"\\\\Leftrightarrow\"},\n            {\"asciimath\":\"rightarrow\",\"tex\":\"\\\\rightarrow\"},\n            {\"asciimath\":\"Rightarrow\",\"tex\":\"\\\\Rightarrow\"},\n            {\"asciimath\":\"backslash\",\"tex\":\"\\\\backslash\"},\n            {\"asciimath\":\"leftarrow\",\"tex\":\"\\\\leftarrow\"},\n            {\"asciimath\":\"Leftarrow\",\"tex\":\"\\\\Leftarrow\"},\n            {\"asciimath\":\"setminus\",\"tex\":\"\\\\setminus\"},\n            {\"asciimath\":\"bigwedge\",\"tex\":\"\\\\bigwedge\"},\n            {\"asciimath\":\"diamond\",\"tex\":\"\\\\diamond\"},\n            {\"asciimath\":\"bowtie\",\"tex\":\"\\\\bowtie\"},\n            {\"asciimath\":\"bigvee\",\"tex\":\"\\\\bigvee\"},\n            {\"asciimath\":\"bigcap\",\"tex\":\"\\\\bigcap\"},\n            {\"asciimath\":\"bigcup\",\"tex\":\"\\\\bigcup\"},\n            {\"asciimath\":\"square\",\"tex\":\"\\\\square\"},\n            {\"asciimath\":\"lamda\",\"tex\":\"\\\\lambda\"},\n            {\"asciimath\":\"Lamda\",\"tex\":\"\\\\Lambda\"},\n            {\"asciimath\":\"aleph\",\"tex\":\"\\\\aleph\"},\n            {\"asciimath\":\"angle\",\"tex\":\"\\\\angle\"},\n            {\"asciimath\":\"frown\",\"tex\":\"\\\\frown\"},\n            {\"asciimath\":\"qquad\",\"tex\":\"\\\\qquad\"},\n            {\"asciimath\":\"cdots\",\"tex\":\"\\\\cdots\"},\n            {\"asciimath\":\"vdots\",\"tex\":\"\\\\vdots\"},\n            {\"asciimath\":\"ddots\",\"tex\":\"\\\\ddots\"},\n            {\"asciimath\":\"cdot\",\"tex\":\"\\\\cdot\"},\n            {\"asciimath\":\"star\",\"tex\":\"\\\\star\"},\n            {\"asciimath\":\"|><|\",\"tex\":\"\\\\bowtie\"},\n            {\"asciimath\":\"circ\",\"tex\":\"\\\\circ\"},\n            {\"asciimath\":\"oint\",\"tex\":\"\\\\oint\"},\n            {\"asciimath\":\"grad\",\"tex\":\"\\\\nabla\"},\n            {\"asciimath\":\"quad\",\"tex\":\"\\\\quad\"},\n            {\"asciimath\":\"uarr\",\"tex\":\"\\\\uparrow\"},\n            {\"asciimath\":\"darr\",\"tex\":\"\\\\downarrow\"},\n            {\"asciimath\":\"downarrow\",\"tex\":\"\\\\downarrow\"},\n            {\"asciimath\":\"rarr\",\"tex\":\"\\\\rightarrow\"},\n            {\"asciimath\":\">->>\",\"tex\":\"\\\\twoheadrightarrowtail\"},\n            {\"asciimath\":\"larr\",\"tex\":\"\\\\leftarrow\"},\n            {\"asciimath\":\"harr\",\"tex\":\"\\\\leftrightarrow\"},\n            {\"asciimath\":\"rArr\",\"tex\":\"\\\\Rightarrow\"},\n            {\"asciimath\":\"lArr\",\"tex\":\"\\\\Leftarrow\"},\n            {\"asciimath\":\"hArr\",\"tex\":\"\\\\Leftrightarrow\"},\n            {\"asciimath\":\"ast\",\"tex\":\"\\\\ast\"},\n            {\"asciimath\":\"***\",\"tex\":\"\\\\star\"},\n            {\"asciimath\":\"|><\",\"tex\":\"\\\\ltimes\"},\n            {\"asciimath\":\"><|\",\"tex\":\"\\\\rtimes\"},\n            {\"asciimath\":\"^^^\",\"tex\":\"\\\\bigwedge\"},\n            {\"asciimath\":\"vvv\",\"tex\":\"\\\\bigvee\"},\n            {\"asciimath\":\"cap\",\"tex\":\"\\\\cap\"},\n            {\"asciimath\":\"nnn\",\"tex\":\"\\\\bigcap\"},\n            {\"asciimath\":\"cup\",\"tex\":\"\\\\cup\"},\n            {\"asciimath\":\"uuu\",\"tex\":\"\\\\bigcup\"},\n            {\"asciimath\":\"not\",\"tex\":\"\\\\neg\"},\n            {\"asciimath\":\"<=>\",\"tex\":\"\\\\Leftrightarrow\"},\n            {\"asciimath\":\"_|_\",\"tex\":\"\\\\bot\"},\n            {\"asciimath\":\"bot\",\"tex\":\"\\\\bot\"},\n            {\"asciimath\":\"int\",\"tex\":\"\\\\int\"},\n            {\"asciimath\":\"del\",\"tex\":\"\\\\partial\"},\n            {\"asciimath\":\"...\",\"tex\":\"\\\\ldots\"},\n            {\"asciimath\":\"/_\\\\\",\"tex\":\"\\\\triangle\"},\n            {\"asciimath\":\"|__\",\"tex\":\"\\\\lfloor\"},\n            {\"asciimath\":\"__|\",\"tex\":\"\\\\rfloor\"},\n            {\"asciimath\":\"dim\",\"tex\":\"\\\\dim\"},\n            {\"asciimath\":\"mod\",\"tex\":\"\\\\operatorname{mod}\"},\n            {\"asciimath\":\"lub\",\"tex\":\"\\\\operatorname{lub}\"},\n            {\"asciimath\":\"glb\",\"tex\":\"\\\\operatorname{glb}\"},\n            {\"asciimath\":\">->\",\"tex\":\"\\\\rightarrowtail\"},\n            {\"asciimath\":\"->>\",\"tex\":\"\\\\twoheadrightarrow\"},\n            {\"asciimath\":\"|->\",\"tex\":\"\\\\mapsto\"},\n            {\"asciimath\":\"lim\",\"tex\":\"\\\\lim\"},\n            {\"asciimath\":\"Lim\",\"tex\":\"\\\\operatorname{Lim}\"},\n            {\"asciimath\":\"and\",\"tex\":\"\\\\quad\\\\text{and}\\\\quad\"},\n            {\"asciimath\":\"**\",\"tex\":\"\\\\ast\"},\n            {\"asciimath\":\"//\",\"tex\":\"/\"},\n            {\"asciimath\":\"\\\\\",\"tex\":\"\\\\,\"},\n            {\"asciimath\":\"\\\\\\\\\",\"tex\":\"\\\\backslash\"},\n            {\"asciimath\":\"xx\",\"tex\":\"\\\\times\"},\n            {\"asciimath\":\"-:\",\"tex\":\"\\\\div\"},\n            {\"asciimath\":\"o+\",\"tex\":\"\\\\oplus\"},\n            {\"asciimath\":\"ox\",\"tex\":\"\\\\otimes\"},\n            {\"asciimath\":\"o.\",\"tex\":\"\\\\odot\"},\n            {\"asciimath\":\"^\",\"tex\":\"\\\\hat{}\"},\n            {\"asciimath\":\"_\",\"tex\":\"\\\\_\"},\n            {\"asciimath\":\"^^\",\"tex\":\"\\\\wedge\"},\n            {\"asciimath\":\"vv\",\"tex\":\"\\\\vee\"},\n            {\"asciimath\":\"nn\",\"tex\":\"\\\\cap\"},\n            {\"asciimath\":\"uu\",\"tex\":\"\\\\cup\"},\n            {\"asciimath\":\"TT\",\"tex\":\"\\\\top\"},\n            {\"asciimath\":\"+-\",\"tex\":\"\\\\pm\"},\n            {\"asciimath\":\"O/\",\"tex\":\"\\\\emptyset\"},\n            {\"asciimath\":\"oo\",\"tex\":\"\\\\infty\"},\n            {\"asciimath\":\":.\",\"tex\":\"\\\\therefore\"},\n            {\"asciimath\":\":'\",\"tex\":\"\\\\because\"},\n            {\"asciimath\":\"/_\",\"tex\":\"\\\\angle\"},\n            {\"asciimath\":\"|~\",\"tex\":\"\\\\lceil\"},\n            {\"asciimath\":\"~|\",\"tex\":\"\\\\rceil\"},\n            {\"asciimath\":\"CC\",\"tex\":\"\\\\mathbb{C}\"},\n            {\"asciimath\":\"NN\",\"tex\":\"\\\\mathbb{N}\"},\n            {\"asciimath\":\"QQ\",\"tex\":\"\\\\mathbb{Q}\"},\n            {\"asciimath\":\"RR\",\"tex\":\"\\\\mathbb{R}\"},\n            {\"asciimath\":\"ZZ\",\"tex\":\"\\\\mathbb{Z}\"},\n            {\"asciimath\":\"->\",\"tex\":\"\\\\to\"},\n            {\"asciimath\":\"or\",\"tex\":\"\\\\quad\\\\text{or}\\\\quad\"},\n            {\"asciimath\":\"if\",\"tex\":\"\\\\quad\\\\text{if}\\\\quad\"},\n            {\"asciimath\":\"iff\", \"tex\":\"\\\\iff\"},\n            {\"asciimath\":\"*\",\"tex\":\"\\\\cdot\"},\n            {\"asciimath\":\"@\",\"tex\":\"\\\\circ\"},\n            {\"asciimath\":\"%\",\"tex\":\"\\\\%\"},\n            {\"asciimath\":\"boxempty\",\"tex\":\"\\\\square\"},\n            {\"asciimath\":\"lambda\",\"tex\":\"\\\\lambda\"},\n            {\"asciimath\":\"Lambda\",\"tex\":\"\\\\Lambda\"},\n            {\"asciimath\":\"nabla\",\"tex\":\"\\\\nabla\"},\n            {\"asciimath\":\"uparrow\",\"tex\":\"\\\\uparrow\"},\n            {\"asciimath\":\"downarrow\",\"tex\":\"\\\\downarrow\"},\n            {\"asciimath\":\"twoheadrightarrowtail\",\"tex\":\"\\\\twoheadrightarrowtail\"},\n            {\"asciimath\":\"ltimes\",\"tex\":\"\\\\ltimes\"},\n            {\"asciimath\":\"rtimes\",\"tex\":\"\\\\rtimes\"},\n            {\"asciimath\":\"neg\",\"tex\":\"\\\\neg\"},\n            {\"asciimath\":\"partial\",\"tex\":\"\\\\partial\"},\n            {\"asciimath\":\"ldots\",\"tex\":\"\\\\ldots\"},\n            {\"asciimath\":\"triangle\",\"tex\":\"\\\\triangle\"},\n            {\"asciimath\":\"lfloor\",\"tex\":\"\\\\lfloor\"},\n            {\"asciimath\":\"rfloor\",\"tex\":\"\\\\rfloor\"},\n            {\"asciimath\":\"rightarrowtail\",\"tex\":\"\\\\rightarrowtail\"},\n            {\"asciimath\":\"twoheadrightarrow\",\"tex\":\"\\\\twoheadrightarrow\"},\n            {\"asciimath\":\"mapsto\",\"tex\":\"\\\\mapsto\"},\n            {\"asciimath\":\"times\",\"tex\":\"\\\\times\"},\n            {\"asciimath\":\"div\",\"tex\":\"\\\\div\"},\n            {\"asciimath\":\"divide\",\"tex\":\"\\\\div\"},\n            {\"asciimath\":\"oplus\",\"tex\":\"\\\\oplus\"},\n            {\"asciimath\":\"otimes\",\"tex\":\"\\\\otimes\"},\n            {\"asciimath\":\"odot\",\"tex\":\"\\\\odot\"},\n            {\"asciimath\":\"wedge\",\"tex\":\"\\\\wedge\"},\n            {\"asciimath\":\"vee\",\"tex\":\"\\\\vee\"},\n            {\"asciimath\":\"top\",\"tex\":\"\\\\top\"},\n            {\"asciimath\":\"pm\",\"tex\":\"\\\\pm\"},\n            {\"asciimath\":\"emptyset\",\"tex\":\"\\\\emptyset\"},\n            {\"asciimath\":\"infty\",\"tex\":\"\\\\infty\"},\n            {\"asciimath\":\"therefore\",\"tex\":\"\\\\therefore\"},\n            {\"asciimath\":\"because\",\"tex\":\"\\\\because\"},\n            {\"asciimath\":\"lceil\",\"tex\":\"\\\\lceil\"},\n            {\"asciimath\":\"rceil\",\"tex\":\"\\\\rceil\"},\n            {\"asciimath\":\"to\",\"tex\":\"\\\\to\"},\n            {\"asciimath\":\"langle\",\"tex\":\"\\\\langle\"},\n            {\"asciimath\":\"lceiling\",\"tex\":\"\\\\lceil\"},\n            {\"asciimath\":\"rceiling\",\"tex\":\"\\\\rceil\"},\n            {\"asciimath\":\"max\",\"tex\":\"\\\\max\"},\n            {\"asciimath\":\"min\",\"tex\":\"\\\\min\"},\n            {\"asciimath\":\"prod\",\"tex\":\"\\\\prod\"},\n            {\"asciimath\":\"sum\",\"tex\":\"\\\\sum\"},\n        ];\n        this.constants = this.constants.concat(this.relations);\n        \n        this.left_brackets = [\n            {asciimath: 'langle', tex: '\\\\langle'},\n            {asciimath: '(:', tex: '\\\\langle'},\n            {asciimath: '<<', tex: '\\\\langle'},\n            {asciimath: '{:', tex: '.'},\n            {asciimath: '(', tex: '('},\n            {asciimath: '[', tex: '['},\n            {asciimath: '|:', tex: '\\\\lvert'},\n            {asciimath: '{', tex: '\\\\lbrace'},\n            {asciimath: 'lbrace', tex: '\\\\lbrace'},\n        ];\n        this.right_brackets = [\n            {asciimath: 'rangle', tex: '\\\\rangle'},\n            {asciimath: ':)', tex: '\\\\rangle'},\n            {asciimath: '>>', tex: '\\\\rangle'},\n            {asciimath: ':}', tex: '.', free_tex: ':\\\\}'},\n            {asciimath: ')', tex: ')'},\n            {asciimath: ']', tex: ']'},\n            {asciimath: ':|', tex: '\\\\rvert'},\n            {asciimath: '}', tex: '\\\\rbrace'},\n            {asciimath: 'rbrace', tex: '\\\\rbrace'},\n        ];\n        this.leftright_brackets = [\n            {asciimath: '|', left_tex: '\\\\lvert', right_tex: '\\\\rvert', free_tex: '|', mid_tex: '\\\\mid'},\n        ];\n        \n        this.unary_symbols = [\n            {asciimath: \"sqrt\", tex: \"\\\\sqrt\"},\n            {asciimath: \"f\", tex:\"f\", func:true},\n            {asciimath: \"g\", tex:\"g\", func:true},\n            {asciimath: \"sin\", tex:\"\\\\sin\", func:true},\n            {asciimath: \"cos\", tex:\"\\\\cos\", func:true},\n            {asciimath: \"tan\", tex:\"\\\\tan\", func:true},\n            {asciimath: \"arcsin\", tex:\"\\\\arcsin\", func:true},\n            {asciimath: \"arccos\", tex:\"\\\\arccos\", func:true},\n            {asciimath: \"arctan\", tex:\"\\\\arctan\", func:true},\n            {asciimath: \"sinh\", tex:\"\\\\sinh\", func:true},\n            {asciimath: \"cosh\", tex:\"\\\\cosh\", func:true},\n            {asciimath: \"tanh\", tex:\"\\\\tanh\", func:true},\n            {asciimath: \"cot\", tex:\"\\\\cot\", func:true},\n            {asciimath: \"coth\", tex:\"\\\\coth\", func:true},\n            {asciimath: \"sech\", tex:\"\\\\operatorname{sech}\", func:true},\n            {asciimath: \"csch\", tex:\"\\\\operatorname{csch}\", func:true},\n            {asciimath: \"sec\", tex:\"\\\\sec\", func:true},\n            {asciimath: \"csc\", tex:\"\\\\csc\", func:true},\n            {asciimath: \"log\", tex:\"\\\\log\", func:true},\n            {asciimath: \"ln\", tex:\"\\\\ln\", func:true},\n            {asciimath: \"abs\", rewriteleftright:[\"|\",\"|\"]},\n            {asciimath: \"norm\", rewriteleftright:[\"\\\\|\",\"\\\\|\"]},\n            {asciimath: \"floor\", rewriteleftright:[\"\\\\lfloor\",\"\\\\rfloor\"]},\n            {asciimath: \"ceil\", rewriteleftright:[\"\\\\lceil\",\"\\\\rceil\"]},\n            {asciimath: \"Sin\", tex:\"\\\\Sin\", func:true},\n            {asciimath: \"Cos\", tex:\"\\\\Cos\", func:true},\n            {asciimath: \"Tan\", tex:\"\\\\Tan\", func:true},\n            {asciimath: \"Arcsin\", tex:\"\\\\Arcsin\", func:true},\n            {asciimath: \"Arccos\", tex:\"\\\\Arccos\", func:true},\n            {asciimath: \"Arctan\", tex:\"\\\\Arctan\", func:true},\n            {asciimath: \"Sinh\", tex:\"\\\\Sinh\", func:true},\n            {asciimath: \"Cosh\", tex:\"\\\\Cosh\", func:true},\n            {asciimath: \"Tanh\", tex:\"\\\\Tanh\", func:true},\n            {asciimath: \"Cot\", tex:\"\\\\Cot\", func:true},\n            {asciimath: \"Sec\", tex:\"\\\\Sec\", func:true},\n            {asciimath: \"Csc\", tex:\"\\\\Csc\", func:true},\n            {asciimath: \"Log\", tex:\"\\\\Log\", func:true},\n            {asciimath: \"Ln\", tex:\"\\\\Ln\", func:true},\n            {asciimath: \"Abs\", tex:\"\\\\Abs\", rewriteleftright:[\"|\",\"|\"]},\n            {asciimath: \"det\", tex:\"\\\\det\", func:true},\n            {asciimath: \"exp\", tex:\"\\\\exp\", func:true},\n            {asciimath: \"gcd\", tex:\"\\\\gcd\", func:true},\n            {asciimath:\"lcm\", tex:\"\\\\operatorname{lcm}\", func:true},\n            {asciimath: \"cancel\", tex:\"\\\\cancel\"},\n            {asciimath: \"Sqrt\", tex:\"\\\\Sqrt\"},\n            {asciimath: \"hat\", tex:\"\\\\hat\", acc:true},\n            {asciimath:\"bar\", tex:\"\\\\overline\", acc:true},\n            {asciimath:\"overline\", tex:\"\\\\overline\", acc:true},\n            {asciimath: \"vec\", tex:\"\\\\vec\", acc:true},\n            {asciimath: \"tilde\", tex:\"\\\\tilde\", acc:true},\n            {asciimath: \"dot\", tex:\"\\\\dot\", acc:true},\n            {asciimath: \"ddot\", tex:\"\\\\ddot\", acc:true},\n            {asciimath:\"ul\", tex:\"\\\\underline\", acc:true},\n            {asciimath:\"underline\", tex:\"\\\\underline\", acc:true},\n            {asciimath:\"ubrace\", tex:\"\\\\underbrace\", acc:true},\n            {asciimath:\"underbrace\", tex:\"\\\\underbrace\", acc:true},\n            {asciimath:\"obrace\", tex:\"\\\\overbrace\", acc:true},\n            {asciimath:\"overbrace\", tex:\"\\\\overbrace\", acc:true},\n            {asciimath:\"bb\", atname:\"mathvariant\", atval:\"bold\", tex:\"\\\\mathbf\"},\n            {asciimath: \"mathbf\", atname:\"mathvariant\", atval:\"bold\", tex:\"mathbf\"},\n            {asciimath:\"sf\", atname:\"mathvariant\", atval:\"sans-serif\", tex:\"\\\\mathsf\"},\n            {asciimath: \"mathsf\", atname:\"mathvariant\", atval:\"sans-serif\", tex:\"mathsf\"},\n            {asciimath:\"bbb\", atname:\"mathvariant\", atval:\"double-struck\", tex:\"\\\\mathbb\"},\n            {asciimath: \"mathbb\", atname:\"mathvariant\", atval:\"double-struck\", tex:\"\\\\mathbb\"},\n            {asciimath:\"cc\", atname:\"mathvariant\", atval:\"script\", tex:\"\\\\mathcal\"},\n            {asciimath: \"mathcal\", atname:\"mathvariant\", atval:\"script\", tex:\"\\\\mathcal\"},\n            {asciimath:\"tt\", atname:\"mathvariant\", atval:\"monospace\", tex:\"\\\\mathtt\"},\n            {asciimath: \"mathtt\", atname:\"mathvariant\", atval:\"monospace\", tex:\"\\\\mathtt\"},\n            {asciimath:\"fr\", atname:\"mathvariant\", atval:\"fraktur\", tex:\"\\\\mathfrak\"},\n            {asciimath: \"mathfrak\", atname:\"mathvariant\", atval:\"fraktur\", tex:\"\\\\mathfrak\"},\n        ];\n        \n        this.binary_symbols = [\n            {asciimath: \"root\", tex:\"\\\\sqrt\", option: true},\n            {asciimath: \"frac\",    tex:\"\\\\frac\"},\n            {asciimath: \"stackrel\", tex:\"\\\\stackrel\"},\n            {asciimath: \"overset\", tex:\"\\\\overset\"},\n            {asciimath: \"underset\", tex:\"\\\\underset\"},\n            {asciimath:\"color\", tex: \"\\\\color\", rawfirst: true},\n        ]\n        \n        this.non_constant_symbols = ['_','^','/'];\n        \n    }\n\n    sort_symbols() {\n        const by_asciimath = (a,b)=>{a=a.asciimath.length,b=b.asciimath.length; return a>b ? -1 : a<b ? 1 : 0};\n        this.constants.sort(by_asciimath);\n        this.relations.sort(by_asciimath);\n        this.left_brackets.sort(by_asciimath);\n        this.right_brackets.sort(by_asciimath);\n        this.leftright_brackets.sort(by_asciimath);\n        this.unary_symbols.sort(by_asciimath);\n        this.binary_symbols.sort(by_asciimath);\n    }\n    \n    error(message, pos) {\n        const neighbourhood = this.source(pos).slice(0,5);\n        throw(new Error(`Error at character ${pos} near \"${neighbourhood}\": ${message}`));\n    }\n    \n    literal(token) {\n        if(token) {\n            return {tex: token.token, pos: token.pos, end: token.end, ttype: 'literal'};\n        }\n    }\n\n    longest(matches) {\n        matches = matches.filter(x=>!!x);\n        matches.sort((x,y)=>{\n            x=x.end;\n            y=y.end;\n            return x>y ? -1 : x<y ? 1 : 0;\n        });\n        return matches[0];\n    }\n\n    escape_text(str) {\n        return str\n            .replace(/\\{/g,'\\\\{')\n            .replace(/\\}/g,'\\\\}')\n        ;\n    }\n    \n    input(str) {\n        this._source = str;\n        this.brackets = [];\n    }\n    \n    source(pos = 0,end) {\n        if(arguments.length>1) {\n            return this._source.slice(pos,end);\n        } else {\n            return this._source.slice(pos);\n        }\n    }\n    \n    eof(pos = 0) {\n        pos = this.strip_space(pos);\n        return pos == this._source.length;\n    }\n\n    unbracket(tok) {\n        if(!tok) {\n            return;\n        }\n        if(!tok.bracket) {\n            return tok;\n        }\n\n        const skip_brackets = ['(',')','[',']','{','}'];\n        const skipleft = skip_brackets.includes(tok.left.asciimath);\n        const skipright = skip_brackets.includes(tok.right.asciimath);\n        const pos = skipleft ? tok.left.end : tok.pos;\n        const end = skipright ? tok.right.pos : tok.end;\n        let left = skipleft ? '' : tok.left.tex;\n        let right = skipright ? '' : tok.right.tex;\n        const middle = tok.middle ? tok.middle.tex : '';\n        if(left || right) {\n            left = left || '.';\n            right = right || '.';\n            return {tex: `\\\\left ${left} ${middle} \\\\right ${right}`, pos: tok.pos, end: tok.end};\n        } else {\n            return {tex: middle, pos: tok.pos, end: tok.end, middle_asciimath: this.source(pos,end)};\n        }\n    }\n    \n    parse(str) {\n        this.input(str);\n        const result = this.consume();\n        return result.tex;\n    }\n\n    consume(pos = 0) {\n        let tex = '';\n        const exprs = [];\n        while(!this.eof(pos)) {\n            let expr = this.expression_list(pos);\n            if(!expr) {\n                const rb = this.right_bracket(pos);\n                if(rb) {\n                    if(rb.def.free_tex) {\n                        rb.tex = rb.def.free_tex;\n                    }\n                    expr = rb;\n\n                }\n                const lr = this.leftright_bracket(pos);\n                if(lr) {\n                    expr = lr;\n                    const ss = this.subsup(lr.end);\n                    if(ss) {\n                        expr = {tex: `${expr.tex}${ss.tex}`, pos: pos, end: ss.end, ttype: 'expression'}\n                    }\n                }\n            }\n            if(expr) {\n                if(tex) {\n                    tex += ' ';\n                }\n                tex += expr.tex;\n                pos = expr.end;\n                exprs.push(expr);\n            } else if(!this.eof(pos)) {\n                const chr = this.source(pos,pos+1);\n                exprs.push({tex: chr, pos: pos, ttype: 'character'});\n                tex += chr;\n                pos += 1;\n            }\n        }\n        return {tex: tex, exprs: exprs};\n    }\n    \n    strip_space(pos = 0) {\n        const osource = this.source(pos);\n        const reduced = osource.replace(/^(\\s|\\\\(?![\\\\ ]))*/,'');\n        return pos + osource.length - reduced.length;\n    }\n    \n    /* Does the given regex match next?\n     */\n    match(re, pos) {\n        pos = this.strip_space(pos);\n        const m = re.exec(this.source(pos));\n        if(m) {\n            const token = m[0];\n            return {token: token, pos: pos, match: m, end: pos+token.length, ttype: 'regex'};\n        }\n    }\n    \n    /* Does the exact given string occur next?\n     */\n    exact(str, pos) {\n        pos = this.strip_space(pos);\n        if(this.source(pos).slice(0, str.length) == str) {\n            return {token: str, pos: pos, end: pos+str.length, ttype: 'exact'};\n        }\n    }\n\n    expression_list(pos = 0) {\n        let expr = this.expression(pos);\n        if(!expr) {\n            return;\n        }\n        let end = expr.end;\n        let tex = expr.tex;\n        let exprs = [expr];\n        while(!this.eof(end)) {\n            const comma = this.exact(\",\",end);\n            if(!comma) {\n                break;\n            }\n            tex += ' ,';\n            end = comma.end;\n            expr = this.expression(end);\n            if(!expr) {\n                break;\n            }\n            tex += ' '+expr.tex;\n            exprs.push(expr);\n            end = expr.end;\n        }\n        return {tex: tex, pos: pos, end: end, exprs: exprs, ttype: 'expression_list'};\n    }\n    \n    // E ::= IE | I/I                       Expression\n    expression(pos = 0) {\n        const negative = this.negative_expression(pos);\n        if(negative) {\n            return negative;\n        }\n        const first = this.intermediate_or_fraction(pos);\n        if(!first) {\n            for(let c of this.non_constant_symbols) {\n                const m = this.exact(c,pos);\n                if(m) {\n                    return {tex: c, pos: pos, end: m.end, ttype: 'constant'};\n                }\n            }\n            return;\n        }\n        if(this.eof(first.end)) {\n            return first;\n        }\n        const second = this.expression(first.end);\n        if(second) {\n            return {tex: first.tex+' '+second.tex, pos: first.pos, end: second.end, ttype: 'expression', exprs: [first,second]};\n        } else {\n            return first;\n        }\n    }\n\n    negative_expression(pos = 0) {\n        const dash = this.exact(\"-\",pos);\n        if(dash && !this.other_constant(pos)) {\n            const expr = this.expression(dash.end);\n            if(expr) {\n                return {tex: `- ${expr.tex}`, pos: pos, end: expr.end, ttype: 'negative_expression', dash: dash, expression: expr}\n            } else {\n                return {tex: '-', pos: pos, end: dash.end, ttype: 'constant'};\n            }\n        }\n    }\n    \n    intermediate_or_fraction(pos = 0) {\n        const first = this.intermediate(pos);\n        if(!first) {\n            return;\n        }\n        let frac = this.match(/^\\/(?!\\/)/,first.end);\n        if(frac) {\n            const second = this.intermediate(frac.end);\n            if(second) {\n                const ufirst = this.unbracket(first);\n                const usecond = this.unbracket(second);\n                return {tex: `\\\\frac{${ufirst.tex}}{${usecond.tex}}`, pos: first.pos, end: second.end, ttype: 'fraction', numerator: ufirst, denominator: usecond, raw_numerator: first, raw_denominator: second};\n            } else {\n                const ufirst = this.unbracket(first);\n                return {tex: `\\\\frac{${ufirst.tex}}{}`, pos: first.pos, end: frac.end, ttype: 'fraction', numerator: ufirst, denominator: null, raw_numerator: first, raw_denominator: null};\n            }\n        } else {\n            return first;\n        }\n    }\n    \n    // I ::= S_S | S^S | S_S^S | S          Intermediate expression\n    intermediate(pos = 0) {\n        const first = this.simple(pos);\n        if(!first) {\n            return;\n        }\n        const ss = this.subsup(first.end);\n        if(ss) {\n            return {tex: `${first.tex}${ss.tex}`, pos:pos, end:ss.end, ttype: 'intermediate', expression: first, subsup: ss};\n        } else {\n            return first;\n        }\n    }\n\n    subsup(pos = 0) {\n        let tex = '';\n        let end = pos;\n        let sub = this.exact('_',pos);\n        let sub_expr, sup_expr;\n        if(sub) {\n            sub_expr = this.unbracket(this.simple(sub.end));\n            if(sub_expr) {\n                tex = `${tex}_{${sub_expr.tex}}`;\n                end = sub_expr.end;\n            } else {\n                tex = `${tex}_{}`;\n                end = sub.end;\n            }\n        }\n        let sup = this.match(/^\\^(?!\\^)/,end);\n        if(sup) {\n            sup_expr = this.unbracket(this.simple(sup.end));\n            if(sup_expr) {\n                tex = `${tex}^{${sup_expr.tex}}`;\n                end = sup_expr.end;\n            } else {\n                tex = `${tex}^{}`;\n                end = sup.end;\n            }\n        }\n        if(sub || sup) {\n            return {tex: tex, pos: pos, end: end, ttype: 'subsup', sub: sub_expr, sup: sup_expr};\n        }\n    }\n\n    // S ::= v | lEr | uS | bSS             Simple expression\n    simple(pos = 0) {\n        return this.longest([this.matrix(pos), this.bracketed_expression(pos), this.binary(pos), this.constant(pos), this.text(pos), this.unary(pos), this.negative_simple(pos)]);\n    }\n\n    negative_simple(pos = 0) {\n        const dash = this.exact(\"-\",pos);\n        if(dash && !this.other_constant(pos)) {\n            const expr = this.simple(dash.end);\n            if(expr) {\n                return {tex: `- ${expr.tex}`, pos: pos, end: expr.end, ttype: 'negative_simple', dash: dash, expr: expr}\n            } else {\n                return {tex: '-', pos: pos, end: dash.end, ttype: 'constant'};\n            }\n        }\n    }\n\n    // matrix: leftbracket \"(\" expr \")\" (\",\" \"(\" expr \")\")* rightbracket \n    // each row must have the same number of elements\n    matrix(pos = 0) {\n        let left = this.left_bracket(pos);\n        let lr = false;\n        if(!left) {\n            left = this.leftright_bracket(pos,'left');\n            if(!left) {\n                return;\n            }\n            lr = true;\n        }\n        const contents = this.matrix_contents(left.end, lr);\n        if(!contents) {\n            return;\n        }\n        const right = lr ? this.leftright_bracket(contents.end, 'right') : this.right_bracket(contents.end);\n        if(!right) {\n            return;\n        }\n        const contents_tex = contents.rows.map(r=>r.tex).join(' \\\\\\\\ ');\n        const matrix_tex = contents.is_array ? `\\\\begin{array}{${contents.column_desc}} ${contents_tex} \\\\end{array}` : `\\\\begin{matrix} ${contents_tex} \\\\end{matrix}`;\n        return {tex: `\\\\left ${left.tex} ${matrix_tex} \\\\right ${right.tex}`, pos: pos, end: right.end, ttype: 'matrix', rows: contents.rows, left: left, right: right};\n    }\n\n    matrix_contents(pos = 0, leftright = false) {\n        let rows = [];\n        let end = pos;\n        let row_length = undefined;\n        let column_desc = undefined;\n        let is_array = false;\n        while(!this.eof(end) && !(leftright ? this.leftright_bracket(end) : this.right_bracket(end))) {\n            if(rows.length) {\n                const comma = this.exact(\",\",end);\n                if(!comma) {\n                    return;\n                }\n                end = comma.end;\n            }\n            const lb = this.match(/^[(\\[]/,end);\n            if(!lb) {\n                return;\n            }\n\n            const cells = [];\n            const columns = [];\n            end = lb.end;\n            while(!this.eof(end)) {\n                if(cells.length) {\n                    const comma = this.exact(\",\",end);\n                    if(!comma) {\n                        break;\n                    }\n                    end = comma.end;\n                }\n                const cell = this.matrix_cell(end);\n                if(!cell) {\n                    break;\n                }\n                if(cell.ttype=='column') {\n                    columns.push('|');\n                    is_array = true;\n                    if(cell.expr!==null) {\n                        columns.push('r');\n                        cells.push(cell.expr);\n                    }\n                } else {\n                    columns.push('r');\n                    cells.push(cell);\n                }\n                end = cell.end;\n            }\n            if(!cells.length) {\n                return;\n            }\n            if(row_length===undefined) {\n                row_length = cells.length;\n            } else if(cells.length!=row_length) {\n                return;\n            }\n            const rb = this.match(/^[)\\]]/,end);\n            if(!rb) {\n                return;\n            }\n            const row_column_desc = columns.join('');\n            if(column_desc===undefined) {\n                column_desc = row_column_desc;\n            } else if(row_column_desc!=column_desc) {\n                return;\n            }\n            rows.push({ttype: 'row', tex: cells.map(c=>c.tex).join(' & '), pos: lb.end, end: end, cells: cells});\n            end = rb.end;\n        }\n        if(row_length===undefined || (row_length<=1 && rows.length<=1)) {\n            return;\n        }\n        return {rows: rows, end: end, column_desc: column_desc, is_array: is_array};\n    }\n\n    matrix_cell(pos = 0) {\n        const lvert = this.exact('|',pos);\n        if(lvert) {\n            const middle = this.expression(lvert.end);\n            if(middle) {\n                const rvert = this.exact('|',middle.end);\n                if(rvert) {\n                    const second = this.expression(rvert.end);\n                    if(second) {\n                        return {tex: `\\\\left \\\\lvert ${middle.tex} \\\\right \\\\rvert ${second.text}`, pos: lvert.pos, end: second.end, ttype: 'expression', exprs: [middle,second]};\n                    }\n                } else {\n                    return {ttype: 'column', expr: middle, pos: lvert.pos, end: middle.end};\n                }\n            } else {\n                return {ttype: 'column', expr: null, pos: lvert.pos, end: lvert.end}\n            }\n        }\n        return this.expression(pos);\n    }\n    \n    bracketed_expression(pos = 0) {\n        const l = this.left_bracket(pos);\n        if(l) {\n            const middle = this.expression_list(l.end);\n            if(middle) {\n                const m = this.mid_expression(l,middle,pos);\n                if(m) {\n                    return m;\n                }\n                const r = this.right_bracket(middle.end) || this.leftright_bracket(middle.end,'right');\n                if(r) {\n                    return {tex: `\\\\left ${l.tex} ${middle.tex} \\\\right ${r.tex}`, pos: pos, end: r.end, bracket: true, left: l, right: r, middle: middle, ttype: 'bracket'};\n                } else if(this.eof(middle.end)) {\n                    return {tex: `\\\\left ${l.tex} ${middle.tex} \\\\right.`, pos: pos, end: middle.end, ttype: 'bracket', left: l, right: null, middle: middle};\n                } else {\n                    return {tex: `${l.tex} ${middle.tex}`, pos: pos, end: middle.end, ttype: 'expression', exprs: [l,middle]};\n                }\n            } else {\n                const r = this.right_bracket(l.end) || this.leftright_bracket(l.end,'right');\n                if(r) {\n                    return {tex: `\\\\left ${l.tex} \\\\right ${r.tex}`, pos: pos, end: r.end, bracket: true, left: l, right: r, middle: null, ttype: 'bracket'};\n                } else {\n                    return {tex: l.tex, pos: pos, end: l.end, ttype: 'constant'};\n                }\n            }\n        }\n        if(this.other_constant(pos)) {\n            return;\n        }\n        const left = this.leftright_bracket(pos, 'left');\n        if(left) {\n            const middle = this.expression_list(left.end);\n            if(middle) {\n                const m = this.mid_expression(left,middle,pos);\n                if(m) {\n                    return m;\n                }\n                const right = this.leftright_bracket(middle.end, 'right') || this.right_bracket(middle.end);\n                if(right) {\n                    return {tex: `\\\\left ${left.tex} ${middle.tex} \\\\right ${right.tex}`, pos: pos, end: right.end, bracket: true, left: left, right: right, middle: middle, ttype: 'bracket'};\n                }\n            }\n        }\n    }\n\n    // Detect the case where the \"middle\" part of a bracketed expression ends in another bracketed expression whose left delimiter is a left/right symbol, e.g. `|`.\n    // In these cases, interpret this as a bracketed expression where the left/right symbol is a 'mid' delimiter.\n    mid_expression(l,middle,pos) {\n        function is_mid_bracket(t) {\n            return t.ttype == 'bracket' && t.left.ttype=='leftright_bracket';\n        }\n        if(middle.exprs.length==1 && middle.exprs[0].ttype=='expression') {\n            const firsts = [middle.exprs[0].exprs[0]];\n            let last =  middle.exprs[0].exprs[1];\n            let end = middle.end;\n            while(last.ttype=='expression') {\n                const first = last.exprs[0];\n                if(is_mid_bracket(first)) {\n                    last = first;\n                    end = first.end;\n                    break;\n                }\n                firsts.push(last.exprs[0]);\n                last = last.exprs[1];\n            }\n            if(last.ttype=='fraction') {\n                last = last.raw_numerator;\n                end = last.end;\n            }\n            if(!(last.ttype=='bracket' && last.left.ttype=='leftright_bracket')) {\n                return;\n            }\n            const firsttex = firsts.map(e=>e.tex).join(' ');\n            const mid = last.left;\n            const lasttex = last.middle.exprs.map(e=>e.tex).join(' ');\n            const nr = last.right;\n            return {tex: `\\\\left ${l.tex} ${firsttex} ${mid.def.mid_tex} ${lasttex} \\\\right ${nr.tex}`, pos: pos, end: end, left: l, right: nr, middle: {tex: `${firsttex} ${mid.def.mid_tex} ${lasttex}`, exprs: firsts.concat([mid,last.middle]), pos: middle.pos, end: last.middle.end, ttype: 'expression_list'}};\n        }\n    }\n    \n    // r ::= ) | ] | } | :) | :} | other right brackets\n    right_bracket(pos = 0) {\n        for(let bracket of this.right_brackets) {\n            const m = this.exact(bracket.asciimath,pos);\n            if(m) {\n                return {tex: bracket.tex, pos: pos, end: m.end, asciimath: bracket.asciimath, def: bracket, ttype: 'right_bracket'};\n            }\n        }\n    }\n    \n    // l ::= ( | [ | { | (: | {: | other left brackets\n    left_bracket(pos = 0) {\n        for(let bracket of this.left_brackets) {\n            const m = this.exact(bracket.asciimath,pos);\n            if(m) {\n                return {tex: bracket.tex, pos: pos, end: m.end, asciimath: bracket.asciimath, ttype: 'left_bracket'};\n            }\n        }\n    }\n\n    leftright_bracket(pos = 0,position) {\n        for(let lr of this.leftright_brackets) {\n            const b = this.exact(lr.asciimath, pos);\n            if(b) {\n                if(this.exact(',',b.end)) {\n                    return {tex: lr.free_tex, pos: pos, end: b.end, ttype: 'binary'};\n                } else {\n                    return {tex: position=='left' ? lr.left_tex : position=='right' ? lr.right_tex : lr.free_tex, pos: pos, end: b.end, ttype: 'leftright_bracket', def: lr};\n                }\n            }\n        }\n    }\n\n    text(pos = 0) {\n        const quoted = this.match(/^\"([^\"]*)\"/,pos);\n        if(quoted) {\n            const text = this.escape_text(quoted.match[1]);\n            return {tex: `\\\\text{${text}}`, pos: pos, end: quoted.end, ttype: 'text', text: text};\n        }\n        const textfn = this.match(/^(?:mbox|text)\\s*(\\([^)]*\\)?|\\{[^}]*\\}?|\\[[^\\]]*\\]?)/,pos);\n        if(textfn) {\n            const text = this.escape_text(textfn.match[1].slice(1,textfn.match[1].length-1));\n            return {tex: `\\\\text{${text}}`, pos: pos, end: textfn.end, ttype: 'text', text: text};\n        }\n    }\n\n    // b ::= frac | root | stackrel | other binary symbols\n    binary(pos = 0) {\n        for(let binary of this.binary_symbols) {\n            const m = this.exact(binary.asciimath, pos);\n            const [lb1,rb1] = binary.option ? ['[',']'] : ['{','}'];\n            if(m) {\n                const a = this.unbracket(this.simple(m.end));\n                if(a) {\n                    const atex = binary.rawfirst ? a.middle_asciimath : a.tex;\n                    const b = this.unbracket(this.simple(a.end));\n                    if(b) {\n                        return {tex: `${binary.tex}${lb1}${atex}${rb1}{${b.tex}}`, pos: pos, end: b.end, ttype: 'binary', op: binary, arg1: a, arg2: b};\n                    } else {\n                        return {tex: `${binary.tex}${lb1}${atex}${rb1}{}`, pos: pos, end: a.end, ttype: 'binary', op: binary, arg1: a, arg2: null};\n                    }\n                } else {\n                    return {tex: `${binary.tex}${lb1}${rb1}{}`, pos: pos, end: m.end, ttype: 'binary', op: binary, arg1: null, arg2: null};\n                }\n            }\n        }\n    }\n\n    // u ::= sqrt | text | bb | other unary symbols for font commands\n    unary(pos = 0) {\n        for(let u of this.unary_symbols) {\n            const m = this.exact(u.asciimath, pos);\n            if(m) {\n                const ss = this.subsup(m.end);\n                const sstex = ss ? ss.tex : '';\n                const end = ss ? ss.end : m.end;\n                const barg = this.simple(end);\n                const arg = u.func ? barg : this.unbracket(barg);\n                const argtex = arg && (u.raw ? arg.middle_asciimath : arg.tex);\n                if(u.rewriteleftright) {\n                    const [left,right] = u.rewriteleftright;\n                    if(arg) {\n                        return {tex: `\\\\left ${left} ${argtex} \\\\right ${right} ${sstex}`, pos: pos, end: arg.end, ttype: 'unary', op: m, subsup: ss, arg: arg};\n                    } else {\n                        return {tex: `\\\\left ${left} \\\\right ${right} ${sstex}`, pos: pos, end: m.end, ttype: 'unary', op: m, subsup: ss, arg: null};\n                    }\n                } else {\n                    if(arg) {\n                        return {tex: `${u.tex}${sstex}{${argtex}}`, pos: pos, end: arg.end, ttype: 'unary', op: m, subsup: ss, arg: arg};\n                    } else {\n                        return {tex: `${u.tex}${sstex}{}`, pos: pos, end: m.end, ttype: 'unary', op: m, subsup: ss, arg: null};\n                    }\n                }\n            }\n        }\n    }\n\n    // v ::= [A-Za-z] | greek letters | numbers | other constant symbols\n    constant(pos = 0) {\n        if(this.right_bracket(pos)) {\n            return;\n        }\n        return this.longest([this.other_constant(pos), this.greek(pos), this.name(pos), this.number(pos), this.arbitrary_constant(pos)]);\n    }\n    \n    name(pos = 0) {\n        return this.literal(this.match(/^[A-Za-z]/, pos));\n    }\n    \n    greek(pos = 0) {\n        const re_greek = new RegExp('^('+this.greek_letters.join('|')+')');\n        const m = this.match(re_greek, pos);\n        if(m) {\n            return {tex: '\\\\'+m.token, pos: pos, end: m.end, ttype: 'greek'};\n        }\n    }\n    \n    number(pos = 0) {\n        const re_number = new RegExp('^\\\\d+('+this.decimalsign+'\\\\d+)?');\n        return this.literal(this.match(re_number, pos));\n    }\n\n    other_constant(pos = 0) {\n        for(let sym of this.constants) {\n            let m = this.exact(sym.asciimath, pos);\n            if(m) {\n                return {tex: `${sym.tex}`, pos: m.pos, end: m.end, ttype: 'other_constant'};\n            }\n        }\n        for(let sym of this.relations) {\n            if(!sym.asciimath.match(/^!/)) {\n                let notm = this.exact('!'+sym.asciimath, pos);\n                if(notm) {\n                    return {tex: `\\\\not ${sym.tex}`, pos: notm.pos, end: notm.end, ttype: 'other_constant'};\n                }\n            }\n        }\n    }\n    \n    arbitrary_constant(pos = 0) {\n        if(!this.eof(pos)) {\n            if(this.exact(\",\",pos)) {\n                return;\n            }\n            for(let nc of this.non_constant_symbols.concat(this.left_brackets.map(x=>x.asciimath), this.right_brackets.map(x=>x.asciimath), this.leftright_brackets.map(x=>x.asciimath))) {\n                if(this.exact(nc, pos)) {\n                    return;\n                }\n            }\n            const spos = this.strip_space(pos);\n            const symbol = this.source(spos).slice(0,1);\n            return {tex: symbol, pos: pos, end: spos+1, ttype: 'arbitrary_constant'};\n        }\n    }\n}\n\n"],
  "mappings": "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",
  "names": ["AsciiMathParser", "t", "this", "decimalsign", "setup_symbols", "sort_symbols", "greek_letters", "relations", "asciimath", "tex", "constants", "concat", "left_brackets", "right_brackets", "free_tex", "leftright_brackets", "left_tex", "right_tex", "mid_tex", "unary_symbols", "func", "rewriteleftright", "acc", "atname", "atval", "binary_symbols", "option", "rawfirst", "non_constant_symbols", "a", "by_asciimath", "b", "length", "sort", "error", "message", "pos", "neighbourhood", "source", "slice", "Error", "literal", "token", "end", "ttype", "longest", "matches", "filter", "x", "y", "escape_text", "str", "replace", "input", "_source", "brackets", "arguments", "eof", "strip_space", "unbracket", "tok", "bracket", "skip_brackets", "skipleft", "includes", "left", "skipright", "right", "middle", "middle_asciimath", "parse", "consume", "exprs", "expr", "expression_list", "rb", "right_bracket", "def", "lr", "leftright_bracket", "ss", "subsup", "push", "chr", "osource", "reduced", "match", "re", "m", "exec", "exact", "expression", "comma", "negative", "negative_expression", "first", "intermediate_or_fraction", "second", "c", "dash", "other_constant", "intermediate", "frac", "ufirst", "usecond", "numerator", "denominator", "raw_numerator", "raw_denominator", "simple", "sub_expr", "sup_expr", "sub", "sup", "matrix", "bracketed_expression", "binary", "constant", "text", "unary", "negative_simple", "left_bracket", "contents", "matrix_contents", "contents_tex", "rows", "map", "r", "join", "is_array", "column_desc", "leftright", "row_length", "lb", "cells", "columns", "cell", "matrix_cell", "row_column_desc", "lvert", "rvert", "l", "mid_expression", "firsts", "last", "firsttex", "e", "mid", "lasttex", "nr", "position", "quoted", "textfn", "lb1", "rb1", "atex", "op", "arg1", "arg2", "u", "sstex", "barg", "arg", "argtex", "raw", "greek", "name", "number", "arbitrary_constant", "re_greek", "RegExp", "re_number", "sym", "notm", "spos"]
}
