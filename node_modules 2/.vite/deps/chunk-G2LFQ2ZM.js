import {
  add_locations,
  check_target,
  hmr,
  if_block,
  init,
  legacy_api,
  legacy_rest_props,
  prop,
  set_attributes
} from "./chunk-GHWC7UCX.js";
import {
  append,
  ns_template,
  set_text
} from "./chunk-2Y5BGJMR.js";
import {
  FILENAME,
  HMR,
  child,
  deep_read_state,
  get,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mark_module_end,
  mark_module_start,
  mutable_state,
  next,
  pop,
  push,
  reset,
  set,
  strict_equals,
  template_effect
} from "./chunk-F2AP5C63.js";

// node_modules/carbon-icons-svelte/lib/Document.svelte
mark_module_start();
Document[FILENAME] = "node_modules/carbon-icons-svelte/lib/Document.svelte";
var root_1 = add_locations(ns_template(`<title> </title>`), Document[FILENAME], [[23, 13]]);
var root = add_locations(ns_template(`<svg><!><path d="M25.7,9.3l-7-7C18.5,2.1,18.3,2,18,2H8C6.9,2,6,2.9,6,4v24c0,1.1,0.9,2,2,2h16c1.1,0,2-0.9,2-2V10C26,9.7,25.9,9.5,25.7,9.3	z M18,4.4l5.6,5.6H18V4.4z M24,28H8V4h8v6c0,1.1,0.9,2,2,2h6V28z"></path><path d="M10 22H22V24H10zM10 16H22V18H10z"></path></svg>`), Document[FILENAME], [[14, 0, [[24, 2], [24, 202]]]]);
function Document($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, [
    "children",
    "$$slots",
    "$$events",
    "$$legacy"
  ]);
  const $$restProps = legacy_rest_props($$sanitized_props, ["size", "title"]);
  push($$props, false, Document);
  const labelled = mutable_state();
  const attributes = mutable_state();
  let size = prop($$props, "size", 8, 16);
  let title = prop($$props, "title", 8, void 0);
  legacy_pre_effect(
    () => (deep_read_state($$sanitized_props), deep_read_state(title())),
    () => {
      set(labelled, $$sanitized_props["aria-label"] || $$sanitized_props["aria-labelledby"] || title());
    }
  );
  legacy_pre_effect(
    () => (get(labelled), deep_read_state($$sanitized_props)),
    () => {
      set(attributes, {
        "aria-hidden": get(labelled) ? void 0 : true,
        role: get(labelled) ? "img" : void 0,
        focusable: strict_equals(Number($$sanitized_props["tabindex"]), 0) ? true : void 0
      });
    }
  );
  legacy_pre_effect_reset();
  init();
  var svg = root();
  let attributes_1;
  var node = child(svg);
  {
    var consequent = ($$anchor2) => {
      var title_1 = root_1();
      var text = child(title_1, true);
      reset(title_1);
      template_effect(() => set_text(text, title()));
      append($$anchor2, title_1);
    };
    if_block(node, ($$render) => {
      if (title()) $$render(consequent);
    });
  }
  next(2);
  reset(svg);
  template_effect(() => attributes_1 = set_attributes(
    svg,
    attributes_1,
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      preserveAspectRatio: "xMidYMid meet",
      width: size(),
      height: size(),
      ...get(attributes),
      ...$$restProps
    },
    void 0,
    true
  ));
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Document = hmr(Document, () => Document[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Document[HMR].source;
    set(Document[HMR].source, module.default[HMR].original);
  });
}
var Document_default = Document;
mark_module_end(Document);

export {
  Document_default
};
//# sourceMappingURL=chunk-G2LFQ2ZM.js.map
