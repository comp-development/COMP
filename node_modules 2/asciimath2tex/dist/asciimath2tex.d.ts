export default class AsciiMathParser {
    decimalsign: string;
    setup_symbols(): void;
    greek_letters: string[];
    relations: {
        asciimath: string;
        tex: string;
    }[];
    constants: any;
    left_brackets: {
        asciimath: string;
        tex: string;
    }[];
    right_brackets: ({
        asciimath: string;
        tex: string;
        free_tex?: undefined;
    } | {
        asciimath: string;
        tex: string;
        free_tex: string;
    })[];
    leftright_brackets: {
        asciimath: string;
        left_tex: string;
        right_tex: string;
        free_tex: string;
        mid_tex: string;
    }[];
    unary_symbols: ({
        asciimath: string;
        tex: string;
        func?: undefined;
        rewriteleftright?: undefined;
        acc?: undefined;
        atname?: undefined;
        atval?: undefined;
    } | {
        asciimath: string;
        tex: string;
        func: boolean;
        rewriteleftright?: undefined;
        acc?: undefined;
        atname?: undefined;
        atval?: undefined;
    } | {
        asciimath: string;
        rewriteleftright: string[];
        tex?: undefined;
        func?: undefined;
        acc?: undefined;
        atname?: undefined;
        atval?: undefined;
    } | {
        asciimath: string;
        tex: string;
        rewriteleftright: string[];
        func?: undefined;
        acc?: undefined;
        atname?: undefined;
        atval?: undefined;
    } | {
        asciimath: string;
        tex: string;
        acc: boolean;
        func?: undefined;
        rewriteleftright?: undefined;
        atname?: undefined;
        atval?: undefined;
    } | {
        asciimath: string;
        atname: string;
        atval: string;
        tex: string;
        func?: undefined;
        rewriteleftright?: undefined;
        acc?: undefined;
    })[];
    binary_symbols: ({
        asciimath: string;
        tex: string;
        option: boolean;
        rawfirst?: undefined;
    } | {
        asciimath: string;
        tex: string;
        option?: undefined;
        rawfirst?: undefined;
    } | {
        asciimath: string;
        tex: string;
        rawfirst: boolean;
        option?: undefined;
    })[];
    non_constant_symbols: string[];
    sort_symbols(): void;
    error(message: any, pos: any): void;
    literal(token: any): {
        tex: any;
        pos: any;
        end: any;
        ttype: string;
    };
    longest(matches: any): any;
    escape_text(str: any): any;
    input(str: any): void;
    _source: any;
    brackets: any[];
    source(pos: number, end: any, ...args: any[]): any;
    eof(pos?: number): boolean;
    unbracket(tok: any): any;
    parse(str: any): string;
    consume(pos?: number): {
        tex: string;
        exprs: any[];
    };
    strip_space(pos?: number): number;
    match(re: any, pos: any): {
        token: any;
        pos: any;
        match: any;
        end: any;
        ttype: string;
    };
    exact(str: any, pos: any): {
        token: any;
        pos: any;
        end: any;
        ttype: string;
    };
    expression_list(pos?: number): any;
    expression(pos?: number): any;
    negative_expression(pos?: number): any;
    intermediate_or_fraction(pos?: number): any;
    intermediate(pos?: number): any;
    subsup(pos?: number): {
        tex: string;
        pos: number;
        end: number;
        ttype: string;
        sub: any;
        sup: any;
    };
    simple(pos?: number): any;
    negative_simple(pos?: number): any;
    matrix(pos?: number): any;
    matrix_contents(pos?: number, leftright?: boolean): any;
    matrix_cell(pos?: number): any;
    bracketed_expression(pos?: number): any;
    mid_expression(l: any, middle: any, pos: any): {
        tex: string;
        pos: any;
        end: any;
        left: any;
        right: any;
        middle: {
            tex: string;
            exprs: any[];
            pos: any;
            end: any;
            ttype: string;
        };
    };
    right_bracket(pos?: number): {
        tex: string;
        pos: number;
        end: any;
        asciimath: string;
        def: {
            asciimath: string;
            tex: string;
            free_tex?: undefined;
        } | {
            asciimath: string;
            tex: string;
            free_tex: string;
        };
        ttype: string;
    };
    left_bracket(pos?: number): {
        tex: string;
        pos: number;
        end: any;
        asciimath: string;
        ttype: string;
    };
    leftright_bracket(pos: number, position: any): {
        tex: string;
        pos: number;
        end: any;
        ttype: string;
        def?: undefined;
    } | {
        tex: string;
        pos: number;
        end: any;
        ttype: string;
        def: {
            asciimath: string;
            left_tex: string;
            right_tex: string;
            free_tex: string;
            mid_tex: string;
        };
    };
    text(pos?: number): {
        tex: string;
        pos: number;
        end: any;
        ttype: string;
        text: any;
    };
    binary(pos?: number): {
        tex: string;
        pos: number;
        end: any;
        ttype: string;
        op: {
            asciimath: string;
            tex: string;
            option: boolean;
            rawfirst?: undefined;
        } | {
            asciimath: string;
            tex: string;
            option?: undefined;
            rawfirst?: undefined;
        } | {
            asciimath: string;
            tex: string;
            rawfirst: boolean;
            option?: undefined;
        };
        arg1: any;
        arg2: any;
    };
    unary(pos?: number): any;
    constant(pos?: number): any;
    name(pos?: number): {
        tex: any;
        pos: any;
        end: any;
        ttype: string;
    };
    greek(pos?: number): {
        tex: string;
        pos: number;
        end: any;
        ttype: string;
    };
    number(pos?: number): {
        tex: any;
        pos: any;
        end: any;
        ttype: string;
    };
    other_constant(pos?: number): {
        tex: string;
        pos: any;
        end: any;
        ttype: string;
    };
    arbitrary_constant(pos?: number): {
        tex: any;
        pos: number;
        end: number;
        ttype: string;
    };
}
