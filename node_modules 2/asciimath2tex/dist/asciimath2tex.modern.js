class t{constructor(){this.decimalsign="\\.",this.setup_symbols(),this.sort_symbols()}setup_symbols(){this.greek_letters=["alpha","beta","gamma","Gamma","delta","Delta","epsilon","varepsilon","zeta","eta","theta","Theta","vartheta","iota","kappa","lambda","Lambda","mu","nu","xi","Xi","pi","Pi","rho","sigma","Sigma","tau","upsilon","phi","Phi","varphi","chi","psi","Psi","omega","Omega"],this.relations=[{asciimath:":=",tex:":="},{asciimath:":|:",tex:"\\mid"},{asciimath:"=>",tex:"\\Rightarrow"},{asciimath:"approx",tex:"\\approx"},{asciimath:"~~",tex:"\\approx"},{asciimath:"cong",tex:"\\cong"},{asciimath:"~=",tex:"\\cong"},{asciimath:"equiv",tex:"\\equiv"},{asciimath:"-=",tex:"\\equiv"},{asciimath:"exists",tex:"\\exists"},{asciimath:"EE",tex:"\\exists"},{asciimath:"forall",tex:"\\forall"},{asciimath:"AA",tex:"\\forall"},{asciimath:">=",tex:"\\ge"},{asciimath:"ge",tex:"\\ge"},{asciimath:"gt=",tex:"\\geq"},{asciimath:"geq",tex:"\\geq"},{asciimath:"gt",tex:"\\gt"},{asciimath:"in",tex:"\\in"},{asciimath:"<=",tex:"\\le"},{asciimath:"le",tex:"\\le"},{asciimath:"lt=",tex:"\\leq"},{asciimath:"leq",tex:"\\leq"},{asciimath:"lt",tex:"\\lt"},{asciimath:"models",tex:"\\models"},{asciimath:"|==",tex:"\\models"},{asciimath:"!=",tex:"\\ne"},{asciimath:"ne",tex:"\\ne"},{asciimath:"notin",tex:"\\notin"},{asciimath:"!in",tex:"\\notin"},{asciimath:"prec",tex:"\\prec"},{asciimath:"-lt",tex:"\\prec"},{asciimath:"-<",tex:"\\prec"},{asciimath:"preceq",tex:"\\preceq"},{asciimath:"-<=",tex:"\\preceq"},{asciimath:"propto",tex:"\\propto"},{asciimath:"prop",tex:"\\propto"},{asciimath:"subset",tex:"\\subset"},{asciimath:"sub",tex:"\\subset"},{asciimath:"subseteq",tex:"\\subseteq"},{asciimath:"sube",tex:"\\subseteq"},{asciimath:"succ",tex:"\\succ"},{asciimath:">-",tex:"\\succ"},{asciimath:"succeq",tex:"\\succeq"},{asciimath:">-=",tex:"\\succeq"},{asciimath:"supset",tex:"\\supset"},{asciimath:"sup",tex:"\\supset"},{asciimath:"supseteq",tex:"\\supseteq"},{asciimath:"supe",tex:"\\supseteq"},{asciimath:"vdash",tex:"\\vdash"},{asciimath:"|--",tex:"\\vdash"}],this.constants=[{asciimath:"dt",tex:"dt"},{asciimath:"dx",tex:"dx"},{asciimath:"dy",tex:"dy"},{asciimath:"dz",tex:"dz"},{asciimath:"prime",tex:"'"},{asciimath:"implies",tex:"\\implies"},{asciimath:"epsi",tex:"\\epsilon"},{asciimath:"leftrightarrow",tex:"\\leftrightarrow"},{asciimath:"Leftrightarrow",tex:"\\Leftrightarrow"},{asciimath:"rightarrow",tex:"\\rightarrow"},{asciimath:"Rightarrow",tex:"\\Rightarrow"},{asciimath:"backslash",tex:"\\backslash"},{asciimath:"leftarrow",tex:"\\leftarrow"},{asciimath:"Leftarrow",tex:"\\Leftarrow"},{asciimath:"setminus",tex:"\\setminus"},{asciimath:"bigwedge",tex:"\\bigwedge"},{asciimath:"diamond",tex:"\\diamond"},{asciimath:"bowtie",tex:"\\bowtie"},{asciimath:"bigvee",tex:"\\bigvee"},{asciimath:"bigcap",tex:"\\bigcap"},{asciimath:"bigcup",tex:"\\bigcup"},{asciimath:"square",tex:"\\square"},{asciimath:"lamda",tex:"\\lambda"},{asciimath:"Lamda",tex:"\\Lambda"},{asciimath:"aleph",tex:"\\aleph"},{asciimath:"angle",tex:"\\angle"},{asciimath:"frown",tex:"\\frown"},{asciimath:"qquad",tex:"\\qquad"},{asciimath:"cdots",tex:"\\cdots"},{asciimath:"vdots",tex:"\\vdots"},{asciimath:"ddots",tex:"\\ddots"},{asciimath:"cdot",tex:"\\cdot"},{asciimath:"star",tex:"\\star"},{asciimath:"|><|",tex:"\\bowtie"},{asciimath:"circ",tex:"\\circ"},{asciimath:"oint",tex:"\\oint"},{asciimath:"grad",tex:"\\nabla"},{asciimath:"quad",tex:"\\quad"},{asciimath:"uarr",tex:"\\uparrow"},{asciimath:"darr",tex:"\\downarrow"},{asciimath:"downarrow",tex:"\\downarrow"},{asciimath:"rarr",tex:"\\rightarrow"},{asciimath:">->>",tex:"\\twoheadrightarrowtail"},{asciimath:"larr",tex:"\\leftarrow"},{asciimath:"harr",tex:"\\leftrightarrow"},{asciimath:"rArr",tex:"\\Rightarrow"},{asciimath:"lArr",tex:"\\Leftarrow"},{asciimath:"hArr",tex:"\\Leftrightarrow"},{asciimath:"ast",tex:"\\ast"},{asciimath:"***",tex:"\\star"},{asciimath:"|><",tex:"\\ltimes"},{asciimath:"><|",tex:"\\rtimes"},{asciimath:"^^^",tex:"\\bigwedge"},{asciimath:"vvv",tex:"\\bigvee"},{asciimath:"cap",tex:"\\cap"},{asciimath:"nnn",tex:"\\bigcap"},{asciimath:"cup",tex:"\\cup"},{asciimath:"uuu",tex:"\\bigcup"},{asciimath:"not",tex:"\\neg"},{asciimath:"<=>",tex:"\\Leftrightarrow"},{asciimath:"_|_",tex:"\\bot"},{asciimath:"bot",tex:"\\bot"},{asciimath:"int",tex:"\\int"},{asciimath:"del",tex:"\\partial"},{asciimath:"...",tex:"\\ldots"},{asciimath:"/_\\",tex:"\\triangle"},{asciimath:"|__",tex:"\\lfloor"},{asciimath:"__|",tex:"\\rfloor"},{asciimath:"dim",tex:"\\dim"},{asciimath:"mod",tex:"\\operatorname{mod}"},{asciimath:"lub",tex:"\\operatorname{lub}"},{asciimath:"glb",tex:"\\operatorname{glb}"},{asciimath:">->",tex:"\\rightarrowtail"},{asciimath:"->>",tex:"\\twoheadrightarrow"},{asciimath:"|->",tex:"\\mapsto"},{asciimath:"lim",tex:"\\lim"},{asciimath:"Lim",tex:"\\operatorname{Lim}"},{asciimath:"and",tex:"\\quad\\text{and}\\quad"},{asciimath:"**",tex:"\\ast"},{asciimath:"//",tex:"/"},{asciimath:"\\",tex:"\\,"},{asciimath:"\\\\",tex:"\\backslash"},{asciimath:"xx",tex:"\\times"},{asciimath:"-:",tex:"\\div"},{asciimath:"o+",tex:"\\oplus"},{asciimath:"ox",tex:"\\otimes"},{asciimath:"o.",tex:"\\odot"},{asciimath:"^",tex:"\\hat{}"},{asciimath:"_",tex:"\\_"},{asciimath:"^^",tex:"\\wedge"},{asciimath:"vv",tex:"\\vee"},{asciimath:"nn",tex:"\\cap"},{asciimath:"uu",tex:"\\cup"},{asciimath:"TT",tex:"\\top"},{asciimath:"+-",tex:"\\pm"},{asciimath:"O/",tex:"\\emptyset"},{asciimath:"oo",tex:"\\infty"},{asciimath:":.",tex:"\\therefore"},{asciimath:":'",tex:"\\because"},{asciimath:"/_",tex:"\\angle"},{asciimath:"|~",tex:"\\lceil"},{asciimath:"~|",tex:"\\rceil"},{asciimath:"CC",tex:"\\mathbb{C}"},{asciimath:"NN",tex:"\\mathbb{N}"},{asciimath:"QQ",tex:"\\mathbb{Q}"},{asciimath:"RR",tex:"\\mathbb{R}"},{asciimath:"ZZ",tex:"\\mathbb{Z}"},{asciimath:"->",tex:"\\to"},{asciimath:"or",tex:"\\quad\\text{or}\\quad"},{asciimath:"if",tex:"\\quad\\text{if}\\quad"},{asciimath:"iff",tex:"\\iff"},{asciimath:"*",tex:"\\cdot"},{asciimath:"@",tex:"\\circ"},{asciimath:"%",tex:"\\%"},{asciimath:"boxempty",tex:"\\square"},{asciimath:"lambda",tex:"\\lambda"},{asciimath:"Lambda",tex:"\\Lambda"},{asciimath:"nabla",tex:"\\nabla"},{asciimath:"uparrow",tex:"\\uparrow"},{asciimath:"downarrow",tex:"\\downarrow"},{asciimath:"twoheadrightarrowtail",tex:"\\twoheadrightarrowtail"},{asciimath:"ltimes",tex:"\\ltimes"},{asciimath:"rtimes",tex:"\\rtimes"},{asciimath:"neg",tex:"\\neg"},{asciimath:"partial",tex:"\\partial"},{asciimath:"ldots",tex:"\\ldots"},{asciimath:"triangle",tex:"\\triangle"},{asciimath:"lfloor",tex:"\\lfloor"},{asciimath:"rfloor",tex:"\\rfloor"},{asciimath:"rightarrowtail",tex:"\\rightarrowtail"},{asciimath:"twoheadrightarrow",tex:"\\twoheadrightarrow"},{asciimath:"mapsto",tex:"\\mapsto"},{asciimath:"times",tex:"\\times"},{asciimath:"div",tex:"\\div"},{asciimath:"divide",tex:"\\div"},{asciimath:"oplus",tex:"\\oplus"},{asciimath:"otimes",tex:"\\otimes"},{asciimath:"odot",tex:"\\odot"},{asciimath:"wedge",tex:"\\wedge"},{asciimath:"vee",tex:"\\vee"},{asciimath:"top",tex:"\\top"},{asciimath:"pm",tex:"\\pm"},{asciimath:"emptyset",tex:"\\emptyset"},{asciimath:"infty",tex:"\\infty"},{asciimath:"therefore",tex:"\\therefore"},{asciimath:"because",tex:"\\because"},{asciimath:"lceil",tex:"\\lceil"},{asciimath:"rceil",tex:"\\rceil"},{asciimath:"to",tex:"\\to"},{asciimath:"langle",tex:"\\langle"},{asciimath:"lceiling",tex:"\\lceil"},{asciimath:"rceiling",tex:"\\rceil"},{asciimath:"max",tex:"\\max"},{asciimath:"min",tex:"\\min"},{asciimath:"prod",tex:"\\prod"},{asciimath:"sum",tex:"\\sum"}],this.constants=this.constants.concat(this.relations),this.left_brackets=[{asciimath:"langle",tex:"\\langle"},{asciimath:"(:",tex:"\\langle"},{asciimath:"<<",tex:"\\langle"},{asciimath:"{:",tex:"."},{asciimath:"(",tex:"("},{asciimath:"[",tex:"["},{asciimath:"|:",tex:"\\lvert"},{asciimath:"{",tex:"\\lbrace"},{asciimath:"lbrace",tex:"\\lbrace"}],this.right_brackets=[{asciimath:"rangle",tex:"\\rangle"},{asciimath:":)",tex:"\\rangle"},{asciimath:">>",tex:"\\rangle"},{asciimath:":}",tex:".",free_tex:":\\}"},{asciimath:")",tex:")"},{asciimath:"]",tex:"]"},{asciimath:":|",tex:"\\rvert"},{asciimath:"}",tex:"\\rbrace"},{asciimath:"rbrace",tex:"\\rbrace"}],this.leftright_brackets=[{asciimath:"|",left_tex:"\\lvert",right_tex:"\\rvert",free_tex:"|",mid_tex:"\\mid"}],this.unary_symbols=[{asciimath:"sqrt",tex:"\\sqrt"},{asciimath:"f",tex:"f",func:!0},{asciimath:"g",tex:"g",func:!0},{asciimath:"sin",tex:"\\sin",func:!0},{asciimath:"cos",tex:"\\cos",func:!0},{asciimath:"tan",tex:"\\tan",func:!0},{asciimath:"arcsin",tex:"\\arcsin",func:!0},{asciimath:"arccos",tex:"\\arccos",func:!0},{asciimath:"arctan",tex:"\\arctan",func:!0},{asciimath:"sinh",tex:"\\sinh",func:!0},{asciimath:"cosh",tex:"\\cosh",func:!0},{asciimath:"tanh",tex:"\\tanh",func:!0},{asciimath:"cot",tex:"\\cot",func:!0},{asciimath:"coth",tex:"\\coth",func:!0},{asciimath:"sech",tex:"\\operatorname{sech}",func:!0},{asciimath:"csch",tex:"\\operatorname{csch}",func:!0},{asciimath:"sec",tex:"\\sec",func:!0},{asciimath:"csc",tex:"\\csc",func:!0},{asciimath:"log",tex:"\\log",func:!0},{asciimath:"ln",tex:"\\ln",func:!0},{asciimath:"abs",rewriteleftright:["|","|"]},{asciimath:"norm",rewriteleftright:["\\|","\\|"]},{asciimath:"floor",rewriteleftright:["\\lfloor","\\rfloor"]},{asciimath:"ceil",rewriteleftright:["\\lceil","\\rceil"]},{asciimath:"Sin",tex:"\\Sin",func:!0},{asciimath:"Cos",tex:"\\Cos",func:!0},{asciimath:"Tan",tex:"\\Tan",func:!0},{asciimath:"Arcsin",tex:"\\Arcsin",func:!0},{asciimath:"Arccos",tex:"\\Arccos",func:!0},{asciimath:"Arctan",tex:"\\Arctan",func:!0},{asciimath:"Sinh",tex:"\\Sinh",func:!0},{asciimath:"Cosh",tex:"\\Cosh",func:!0},{asciimath:"Tanh",tex:"\\Tanh",func:!0},{asciimath:"Cot",tex:"\\Cot",func:!0},{asciimath:"Sec",tex:"\\Sec",func:!0},{asciimath:"Csc",tex:"\\Csc",func:!0},{asciimath:"Log",tex:"\\Log",func:!0},{asciimath:"Ln",tex:"\\Ln",func:!0},{asciimath:"Abs",tex:"\\Abs",rewriteleftright:["|","|"]},{asciimath:"det",tex:"\\det",func:!0},{asciimath:"exp",tex:"\\exp",func:!0},{asciimath:"gcd",tex:"\\gcd",func:!0},{asciimath:"lcm",tex:"\\operatorname{lcm}",func:!0},{asciimath:"cancel",tex:"\\cancel"},{asciimath:"Sqrt",tex:"\\Sqrt"},{asciimath:"hat",tex:"\\hat",acc:!0},{asciimath:"bar",tex:"\\overline",acc:!0},{asciimath:"overline",tex:"\\overline",acc:!0},{asciimath:"vec",tex:"\\vec",acc:!0},{asciimath:"tilde",tex:"\\tilde",acc:!0},{asciimath:"dot",tex:"\\dot",acc:!0},{asciimath:"ddot",tex:"\\ddot",acc:!0},{asciimath:"ul",tex:"\\underline",acc:!0},{asciimath:"underline",tex:"\\underline",acc:!0},{asciimath:"ubrace",tex:"\\underbrace",acc:!0},{asciimath:"underbrace",tex:"\\underbrace",acc:!0},{asciimath:"obrace",tex:"\\overbrace",acc:!0},{asciimath:"overbrace",tex:"\\overbrace",acc:!0},{asciimath:"bb",atname:"mathvariant",atval:"bold",tex:"\\mathbf"},{asciimath:"mathbf",atname:"mathvariant",atval:"bold",tex:"mathbf"},{asciimath:"sf",atname:"mathvariant",atval:"sans-serif",tex:"\\mathsf"},{asciimath:"mathsf",atname:"mathvariant",atval:"sans-serif",tex:"mathsf"},{asciimath:"bbb",atname:"mathvariant",atval:"double-struck",tex:"\\mathbb"},{asciimath:"mathbb",atname:"mathvariant",atval:"double-struck",tex:"\\mathbb"},{asciimath:"cc",atname:"mathvariant",atval:"script",tex:"\\mathcal"},{asciimath:"mathcal",atname:"mathvariant",atval:"script",tex:"\\mathcal"},{asciimath:"tt",atname:"mathvariant",atval:"monospace",tex:"\\mathtt"},{asciimath:"mathtt",atname:"mathvariant",atval:"monospace",tex:"\\mathtt"},{asciimath:"fr",atname:"mathvariant",atval:"fraktur",tex:"\\mathfrak"},{asciimath:"mathfrak",atname:"mathvariant",atval:"fraktur",tex:"\\mathfrak"}],this.binary_symbols=[{asciimath:"root",tex:"\\sqrt",option:!0},{asciimath:"frac",tex:"\\frac"},{asciimath:"stackrel",tex:"\\stackrel"},{asciimath:"overset",tex:"\\overset"},{asciimath:"underset",tex:"\\underset"},{asciimath:"color",tex:"\\color",rawfirst:!0}],this.non_constant_symbols=["_","^","/"]}sort_symbols(){const t=(t,e)=>(t=t.asciimath.length)>(e=e.asciimath.length)?-1:t<e?1:0;this.constants.sort(t),this.relations.sort(t),this.left_brackets.sort(t),this.right_brackets.sort(t),this.leftright_brackets.sort(t),this.unary_symbols.sort(t),this.binary_symbols.sort(t)}error(t,e){const i=this.source(e).slice(0,5);throw new Error(`Error at character ${e} near "${i}": ${t}`)}literal(t){if(t)return{tex:t.token,pos:t.pos,end:t.end,ttype:"literal"}}longest(t){return(t=t.filter(t=>!!t)).sort((t,e)=>(t=t.end)>(e=e.end)?-1:t<e?1:0),t[0]}escape_text(t){return t.replace(/\{/g,"\\{").replace(/\}/g,"\\}")}input(t){this._source=t,this.brackets=[]}source(t=0,e){return arguments.length>1?this._source.slice(t,e):this._source.slice(t)}eof(t=0){return(t=this.strip_space(t))==this._source.length}unbracket(t){if(!t)return;if(!t.bracket)return t;const e=["(",")","[","]","{","}"],i=e.includes(t.left.asciimath),a=e.includes(t.right.asciimath);let s=i?"":t.left.tex,r=a?"":t.right.tex;const c=t.middle?t.middle.tex:"";return s||r?(s=s||".",r=r||".",{tex:`\\left ${s} ${c} \\right ${r}`,pos:t.pos,end:t.end}):{tex:c,pos:t.pos,end:t.end,middle_asciimath:this.source(i?t.left.end:t.pos,a?t.right.pos:t.end)}}parse(t){return this.input(t),this.consume().tex}consume(t=0){let e="";const i=[];for(;!this.eof(t);){let a=this.expression_list(t);if(!a){const e=this.right_bracket(t);e&&(e.def.free_tex&&(e.tex=e.def.free_tex),a=e);const i=this.leftright_bracket(t);if(i){a=i;const e=this.subsup(i.end);e&&(a={tex:`${a.tex}${e.tex}`,pos:t,end:e.end,ttype:"expression"})}}if(a)e&&(e+=" "),e+=a.tex,t=a.end,i.push(a);else if(!this.eof(t)){const a=this.source(t,t+1);i.push({tex:a,pos:t,ttype:"character"}),e+=a,t+=1}}return{tex:e,exprs:i}}strip_space(t=0){const e=this.source(t),i=e.replace(/^(\s|\\(?![\\ ]))*/,"");return t+e.length-i.length}match(t,e){e=this.strip_space(e);const i=t.exec(this.source(e));if(i){const t=i[0];return{token:t,pos:e,match:i,end:e+t.length,ttype:"regex"}}}exact(t,e){if(e=this.strip_space(e),this.source(e).slice(0,t.length)==t)return{token:t,pos:e,end:e+t.length,ttype:"exact"}}expression_list(t=0){let e=this.expression(t);if(!e)return;let i=e.end,a=e.tex,s=[e];for(;!this.eof(i);){const t=this.exact(",",i);if(!t)break;if(a+=" ,",i=t.end,e=this.expression(i),!e)break;a+=" "+e.tex,s.push(e),i=e.end}return{tex:a,pos:t,end:i,exprs:s,ttype:"expression_list"}}expression(t=0){const e=this.negative_expression(t);if(e)return e;const i=this.intermediate_or_fraction(t);if(!i){for(let e of this.non_constant_symbols){const i=this.exact(e,t);if(i)return{tex:e,pos:t,end:i.end,ttype:"constant"}}return}if(this.eof(i.end))return i;const a=this.expression(i.end);return a?{tex:i.tex+" "+a.tex,pos:i.pos,end:a.end,ttype:"expression",exprs:[i,a]}:i}negative_expression(t=0){const e=this.exact("-",t);if(e&&!this.other_constant(t)){const i=this.expression(e.end);return i?{tex:`- ${i.tex}`,pos:t,end:i.end,ttype:"negative_expression",dash:e,expression:i}:{tex:"-",pos:t,end:e.end,ttype:"constant"}}}intermediate_or_fraction(t=0){const e=this.intermediate(t);if(!e)return;let i=this.match(/^\/(?!\/)/,e.end);if(i){const t=this.intermediate(i.end);if(t){const i=this.unbracket(e),a=this.unbracket(t);return{tex:`\\frac{${i.tex}}{${a.tex}}`,pos:e.pos,end:t.end,ttype:"fraction",numerator:i,denominator:a,raw_numerator:e,raw_denominator:t}}{const t=this.unbracket(e);return{tex:`\\frac{${t.tex}}{}`,pos:e.pos,end:i.end,ttype:"fraction",numerator:t,denominator:null,raw_numerator:e,raw_denominator:null}}}return e}intermediate(t=0){const e=this.simple(t);if(!e)return;const i=this.subsup(e.end);return i?{tex:`${e.tex}${i.tex}`,pos:t,end:i.end,ttype:"intermediate",expression:e,subsup:i}:e}subsup(t=0){let e,i,a="",s=t,r=this.exact("_",t);r&&(e=this.unbracket(this.simple(r.end)),e?(a=`${a}_{${e.tex}}`,s=e.end):(a=`${a}_{}`,s=r.end));let c=this.match(/^\^(?!\^)/,s);if(c&&(i=this.unbracket(this.simple(c.end)),i?(a=`${a}^{${i.tex}}`,s=i.end):(a=`${a}^{}`,s=c.end)),r||c)return{tex:a,pos:t,end:s,ttype:"subsup",sub:e,sup:i}}simple(t=0){return this.longest([this.matrix(t),this.bracketed_expression(t),this.binary(t),this.constant(t),this.text(t),this.unary(t),this.negative_simple(t)])}negative_simple(t=0){const e=this.exact("-",t);if(e&&!this.other_constant(t)){const i=this.simple(e.end);return i?{tex:`- ${i.tex}`,pos:t,end:i.end,ttype:"negative_simple",dash:e,expr:i}:{tex:"-",pos:t,end:e.end,ttype:"constant"}}}matrix(t=0){let e=this.left_bracket(t),i=!1;if(!e){if(e=this.leftright_bracket(t,"left"),!e)return;i=!0}const a=this.matrix_contents(e.end,i);if(!a)return;const s=i?this.leftright_bracket(a.end,"right"):this.right_bracket(a.end);if(!s)return;const r=a.rows.map(t=>t.tex).join(" \\\\ ");return{tex:`\\left ${e.tex} ${a.is_array?`\\begin{array}{${a.column_desc}} ${r} \\end{array}`:`\\begin{matrix} ${r} \\end{matrix}`} \\right ${s.tex}`,pos:t,end:s.end,ttype:"matrix",rows:a.rows,left:e,right:s}}matrix_contents(t=0,e=!1){let i,a,s=[],r=t,c=!1;for(;!this.eof(r)&&!(e?this.leftright_bracket(r):this.right_bracket(r));){if(s.length){const t=this.exact(",",r);if(!t)return;r=t.end}const t=this.match(/^[(\[]/,r);if(!t)return;const e=[],h=[];for(r=t.end;!this.eof(r);){if(e.length){const t=this.exact(",",r);if(!t)break;r=t.end}const t=this.matrix_cell(r);if(!t)break;"column"==t.ttype?(h.push("|"),c=!0,null!==t.expr&&(h.push("r"),e.push(t.expr))):(h.push("r"),e.push(t)),r=t.end}if(!e.length)return;if(void 0===i)i=e.length;else if(e.length!=i)return;const n=this.match(/^[)\]]/,r);if(!n)return;const o=h.join("");if(void 0===a)a=o;else if(o!=a)return;s.push({ttype:"row",tex:e.map(t=>t.tex).join(" & "),pos:t.end,end:r,cells:e}),r=n.end}if(!(void 0===i||i<=1&&s.length<=1))return{rows:s,end:r,column_desc:a,is_array:c}}matrix_cell(t=0){const e=this.exact("|",t);if(e){const t=this.expression(e.end);if(!t)return{ttype:"column",expr:null,pos:e.pos,end:e.end};{const i=this.exact("|",t.end);if(!i)return{ttype:"column",expr:t,pos:e.pos,end:t.end};{const a=this.expression(i.end);if(a)return{tex:`\\left \\lvert ${t.tex} \\right \\rvert ${a.text}`,pos:e.pos,end:a.end,ttype:"expression",exprs:[t,a]}}}}return this.expression(t)}bracketed_expression(t=0){const e=this.left_bracket(t);if(e){const i=this.expression_list(e.end);if(i){const a=this.mid_expression(e,i,t);if(a)return a;const s=this.right_bracket(i.end)||this.leftright_bracket(i.end,"right");return s?{tex:`\\left ${e.tex} ${i.tex} \\right ${s.tex}`,pos:t,end:s.end,bracket:!0,left:e,right:s,middle:i,ttype:"bracket"}:this.eof(i.end)?{tex:`\\left ${e.tex} ${i.tex} \\right.`,pos:t,end:i.end,ttype:"bracket",left:e,right:null,middle:i}:{tex:`${e.tex} ${i.tex}`,pos:t,end:i.end,ttype:"expression",exprs:[e,i]}}{const i=this.right_bracket(e.end)||this.leftright_bracket(e.end,"right");return i?{tex:`\\left ${e.tex} \\right ${i.tex}`,pos:t,end:i.end,bracket:!0,left:e,right:i,middle:null,ttype:"bracket"}:{tex:e.tex,pos:t,end:e.end,ttype:"constant"}}}if(this.other_constant(t))return;const i=this.leftright_bracket(t,"left");if(i){const e=this.expression_list(i.end);if(e){const a=this.mid_expression(i,e,t);if(a)return a;const s=this.leftright_bracket(e.end,"right")||this.right_bracket(e.end);if(s)return{tex:`\\left ${i.tex} ${e.tex} \\right ${s.tex}`,pos:t,end:s.end,bracket:!0,left:i,right:s,middle:e,ttype:"bracket"}}}}mid_expression(t,e,i){if(1==e.exprs.length&&"expression"==e.exprs[0].ttype){const s=[e.exprs[0].exprs[0]];let r=e.exprs[0].exprs[1],c=e.end;for(;"expression"==r.ttype;){const t=r.exprs[0];if("bracket"==(a=t).ttype&&"leftright_bracket"==a.left.ttype){r=t,c=t.end;break}s.push(r.exprs[0]),r=r.exprs[1]}if("fraction"==r.ttype&&(r=r.raw_numerator,c=r.end),"bracket"!=r.ttype||"leftright_bracket"!=r.left.ttype)return;const h=s.map(t=>t.tex).join(" "),n=r.left,o=r.middle.exprs.map(t=>t.tex).join(" "),m=r.right;return{tex:`\\left ${t.tex} ${h} ${n.def.mid_tex} ${o} \\right ${m.tex}`,pos:i,end:c,left:t,right:m,middle:{tex:`${h} ${n.def.mid_tex} ${o}`,exprs:s.concat([n,r.middle]),pos:e.pos,end:r.middle.end,ttype:"expression_list"}}}var a}right_bracket(t=0){for(let e of this.right_brackets){const i=this.exact(e.asciimath,t);if(i)return{tex:e.tex,pos:t,end:i.end,asciimath:e.asciimath,def:e,ttype:"right_bracket"}}}left_bracket(t=0){for(let e of this.left_brackets){const i=this.exact(e.asciimath,t);if(i)return{tex:e.tex,pos:t,end:i.end,asciimath:e.asciimath,ttype:"left_bracket"}}}leftright_bracket(t=0,e){for(let i of this.leftright_brackets){const a=this.exact(i.asciimath,t);if(a)return this.exact(",",a.end)?{tex:i.free_tex,pos:t,end:a.end,ttype:"binary"}:{tex:"left"==e?i.left_tex:"right"==e?i.right_tex:i.free_tex,pos:t,end:a.end,ttype:"leftright_bracket",def:i}}}text(t=0){const e=this.match(/^"([^"]*)"/,t);if(e){const i=this.escape_text(e.match[1]);return{tex:`\\text{${i}}`,pos:t,end:e.end,ttype:"text",text:i}}const i=this.match(/^(?:mbox|text)\s*(\([^)]*\)?|\{[^}]*\}?|\[[^\]]*\]?)/,t);if(i){const e=this.escape_text(i.match[1].slice(1,i.match[1].length-1));return{tex:`\\text{${e}}`,pos:t,end:i.end,ttype:"text",text:e}}}binary(t=0){for(let e of this.binary_symbols){const i=this.exact(e.asciimath,t),[a,s]=e.option?["[","]"]:["{","}"];if(i){const r=this.unbracket(this.simple(i.end));if(r){const i=e.rawfirst?r.middle_asciimath:r.tex,c=this.unbracket(this.simple(r.end));return c?{tex:`${e.tex}${a}${i}${s}{${c.tex}}`,pos:t,end:c.end,ttype:"binary",op:e,arg1:r,arg2:c}:{tex:`${e.tex}${a}${i}${s}{}`,pos:t,end:r.end,ttype:"binary",op:e,arg1:r,arg2:null}}return{tex:`${e.tex}${a}${s}{}`,pos:t,end:i.end,ttype:"binary",op:e,arg1:null,arg2:null}}}}unary(t=0){for(let e of this.unary_symbols){const i=this.exact(e.asciimath,t);if(i){const a=this.subsup(i.end),s=a?a.tex:"",r=this.simple(a?a.end:i.end),c=e.func?r:this.unbracket(r),h=c&&(e.raw?c.middle_asciimath:c.tex);if(e.rewriteleftright){const[r,n]=e.rewriteleftright;return c?{tex:`\\left ${r} ${h} \\right ${n} ${s}`,pos:t,end:c.end,ttype:"unary",op:i,subsup:a,arg:c}:{tex:`\\left ${r} \\right ${n} ${s}`,pos:t,end:i.end,ttype:"unary",op:i,subsup:a,arg:null}}return c?{tex:`${e.tex}${s}{${h}}`,pos:t,end:c.end,ttype:"unary",op:i,subsup:a,arg:c}:{tex:`${e.tex}${s}{}`,pos:t,end:i.end,ttype:"unary",op:i,subsup:a,arg:null}}}}constant(t=0){if(!this.right_bracket(t))return this.longest([this.other_constant(t),this.greek(t),this.name(t),this.number(t),this.arbitrary_constant(t)])}name(t=0){return this.literal(this.match(/^[A-Za-z]/,t))}greek(t=0){const e=new RegExp("^("+this.greek_letters.join("|")+")"),i=this.match(e,t);if(i)return{tex:"\\"+i.token,pos:t,end:i.end,ttype:"greek"}}number(t=0){const e=new RegExp("^\\d+("+this.decimalsign+"\\d+)?");return this.literal(this.match(e,t))}other_constant(t=0){for(let e of this.constants){let i=this.exact(e.asciimath,t);if(i)return{tex:`${e.tex}`,pos:i.pos,end:i.end,ttype:"other_constant"}}for(let e of this.relations)if(!e.asciimath.match(/^!/)){let i=this.exact("!"+e.asciimath,t);if(i)return{tex:`\\not ${e.tex}`,pos:i.pos,end:i.end,ttype:"other_constant"}}}arbitrary_constant(t=0){if(!this.eof(t)){if(this.exact(",",t))return;for(let e of this.non_constant_symbols.concat(this.left_brackets.map(t=>t.asciimath),this.right_brackets.map(t=>t.asciimath),this.leftright_brackets.map(t=>t.asciimath)))if(this.exact(e,t))return;const e=this.strip_space(t);return{tex:this.source(e).slice(0,1),pos:t,end:e+1,ttype:"arbitrary_constant"}}}}export{t as default};
//# sourceMappingURL=asciimath2tex.modern.js.map
