import { HTMLRenderer } from '@djot/djot';
import { Options } from 'temml';
import { parse } from '@djot/djot';
import { renderHTML } from '@djot/djot';
import { Visitor } from '@djot/djot';

export declare function align(x: string, options?: Options): string;

export declare function alignat(x: string, pairs: number, options?: Options): string;

export declare function alignatStar(x: string, pairs: number, options?: Options): string;

export declare function alignStar(x: string, options?: Options): string;

export declare function display(x: string, options?: Options): string;

export declare const eqn: typeof equation;

export declare const eqnStar: typeof equationStar;

export declare function equation(x: string, options?: Options): string;

export declare function equationStar(x: string, options?: Options): string;

export declare function gather(x: string, options?: Options): string;

export declare function gatherStar(x: string, options?: Options): string;

export declare function math(x: string, options?: Options): string;

/**
 * generates html markup, with the main text interpreted as djot markup,
 * and math nodes converted to MathML via temml.
 * We will also move any commas and full stops after inline math nodes to prevent HTML line-break at these punctuations.
 *
 * set any temml and djot options with the setOptions function
 *
 * math: starts with ${x}, terminates with new line. MathlifierDj will add $`x` delimiters.
 * display: starts with $${x}, terminates with empty line. MathlifierDj will add $$`x` delimiters.
 * ams env: starts with $${'align'}x, etc, terminates with empty line. MathlifierDj will add $$`\begin{env}x\end{env}` delimiters.
 * text: starts with @${x}, terminates immediately. MathlifierDj will interpolate these as regular strings
 *
 * mathlifier will also turn any non-escaped $x$ delimiters into djot math $`x` syntax.
 */
export declare function mathlifier(strings: TemplateStringsArray, ...values: unknown[]): string;

/**
 * generates djot markup.
 *
 * math: starts with ${x}, terminates with new line. MathlifierDj will add $`x` delimiters.
 * display: starts with $${x}, terminates with empty line. MathlifierDj will add $$`x` delimiters.
 * ams env: starts with $${'align'}x, etc, terminates with empty line. MathlifierDj will add $$`\begin{env}x\end{env}` delimiters.
 * text: starts with @${x}, terminates immediately. MathlifierDj will interpolate these as regular strings
 *
 * mathlifier will also turn any non-escaped $x$ delimiters into djot math $`x` syntax.
 */
export declare function mathlifierDj(strings: TemplateStringsArray, ...values: unknown[]): string;

/**
 * @param modules an object with functions detailing how to render the supported math environments
 * @param options
 * @returns a tagged template function that manipulates template strings
 */
export declare function mathlifierFactory(modules: Modules, options?: {
    postContent?: {
        mode?: postContentModes;
        content: string;
    };
}): (strings: TemplateStringsArray, ...values: unknown[]) => string;

/**
 * adds math markup to template string.
 *
 * math: starts with ${x}, terminates with new line. Mathlifier will add $x$ delimiters.
 * display: starts with $${x}, terminates with empty line. Mathlifier will add $$x$$ delimiters.
 * amsmath env: starts with $${'align'}x, etc, terminates with empty line. Mathlifier will add $$\begin{env}x\end{env}$$ delimiters.
 * text: starts with @${x}, terminates immediately. Mathlifier will interpolate these as regular strings
 */
export declare function mathlifierTex(strings: TemplateStringsArray, ...values: unknown[]): string;

declare interface Modules {
    math: (x: string) => string;
    display: (x: string) => string;
    mathEnvs?: {
        equation?: (x: string) => string;
        align?: (x: string) => string;
        gather?: (x: string) => string;
        alignat?: (x: string) => string;
        equationStar?: (x: string) => string;
        alignStar?: (x: string) => string;
        gatherStar?: (x: string) => string;
        alignatStar?: (x: string) => string;
    };
}

declare type postContentModes = "text" | "math" | "display" | "auto-math";

export declare function resetOptions(): void;

export declare function setOptions(newOptions: {
    djotParseOptions?: Parameters<typeof parse>[1];
    temmlOptions?: Options;
    djotHTMLRenderOptions?: Parameters<typeof renderHTML>[1];
    overrides?: Visitor<HTMLRenderer, string>;
}): void;

export { }
