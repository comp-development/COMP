drop policy "Admin can delete items" on "public"."admins";

drop policy "Admin can insert items" on "public"."admins";

drop policy "Enable read access for all users" on "public"."admins";

drop policy "Admins can read" on "public"."custom_fields";

drop policy "Admin can do anything" on "public"."events";

drop policy "Admins can do anything" on "public"."graded_answers";

drop policy "Admins can do anything" on "public"."problem_clarifications";

drop policy "Admins can do anything" on "public"."problems";

drop policy "Admins can do anything" on "public"."student_teams";

drop policy "Admins can do anything" on "public"."students";

drop policy "Admins can do anything" on "public"."teams";

drop policy "Admins can do anything" on "public"."test_answers";

drop policy "Admins can do anything" on "public"."test_problems";

drop policy "Admins can do anything" on "public"."test_takers";

drop policy "Admins can do anything" on "public"."tests";

alter table "public"."admins" drop constraint "admins_admin_id_fkey";

alter table "public"."coaches" drop constraint "coaches_org_id_fkey";

create table "public"."host_admins" (
    "host_admin_id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "host_id" bigint not null,
    "admin_id" uuid not null
);

create unique index "host_admin_unique" on public.host_admins using btree (host_id, admin_id);

alter table "public"."host_admins" add constraint "host_admin_unique" UNIQUE using index "host_admin_unique";

create table "public"."org_coaches" (
    "org_coach_id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "org_id" bigint not null,
    "coach_id" uuid not null
);

create unique index "org_coach_unique" on public.org_coaches using btree (org_id, coach_id);

alter table "public"."org_coaches" add constraint "org_coach_unique" UNIQUE using index "org_coach_unique";


alter table "public"."org_coaches" enable row level security;

create table "public"."superadmins" (
    "superadmin_id" uuid not null,
    "first_name" text,
    "last_name" text
);


alter table "public"."superadmins" enable row level security;

alter table "public"."admins" alter column "first_name" set not null;

alter table "public"."admins" alter column "last_name" set not null;

alter table "public"."coaches" drop column "created_at";

alter table "public"."coaches" drop column "org_id";

alter table "public"."coaches" alter column "coach_id" drop identity;

-- https://stackoverflow.com/questions/20342717/postgresql-change-column-type-from-int-to-uuid
-- this OVERWRITES the previous bigint column with new uuids.
-- we don't have any coaches yet, so there are no foreign references to fix.
alter table "public"."coaches" alter column "coach_id" set data type uuid using (gen_random_uuid());

alter table "public"."coaches" alter column "coach_id" set default gen_random_uuid();

alter table "public"."coaches" alter column "coach_id" set data type uuid using "coach_id"::uuid;

alter table "public"."coaches" alter column "first_name" set not null;

alter table "public"."coaches" alter column "last_name" set not null;

CREATE UNIQUE INDEX host_admins_pkey ON public.host_admins USING btree (host_admin_id);

CREATE UNIQUE INDEX org_coaches_pkey ON public.org_coaches USING btree (org_coach_id);

CREATE UNIQUE INDEX superadmins_pkey ON public.superadmins USING btree (superadmin_id);

alter table "public"."host_admins" add constraint "host_admins_pkey" PRIMARY KEY using index "host_admins_pkey";

alter table "public"."org_coaches" add constraint "org_coaches_pkey" PRIMARY KEY using index "org_coaches_pkey";

alter table "public"."superadmins" add constraint "superadmins_pkey" PRIMARY KEY using index "superadmins_pkey";

alter table "public"."admins" add constraint "admins_admin_id_fkey1" FOREIGN KEY (admin_id) REFERENCES auth.users(id) not valid;

alter table "public"."admins" validate constraint "admins_admin_id_fkey1";

alter table "public"."coaches" add constraint "coaches_coach_id_fkey" FOREIGN KEY (coach_id) REFERENCES auth.users(id) not valid;

alter table "public"."coaches" validate constraint "coaches_coach_id_fkey";

alter table "public"."host_admins" add constraint "host_admins_admin_id_fkey" FOREIGN KEY (admin_id) REFERENCES admins(admin_id) not valid;   

alter table "public"."host_admins" validate constraint "host_admins_admin_id_fkey";

alter table "public"."host_admins" add constraint "host_admins_host_id_fkey" FOREIGN KEY (host_id) REFERENCES hosts(host_id) not valid;       

alter table "public"."host_admins" validate constraint "host_admins_host_id_fkey";

alter table "public"."org_coaches" add constraint "org_coaches_coach_id_fkey" FOREIGN KEY (coach_id) REFERENCES coaches(coach_id) not valid;  

alter table "public"."org_coaches" validate constraint "org_coaches_coach_id_fkey";

alter table "public"."org_coaches" add constraint "org_coaches_org_id_fkey" FOREIGN KEY (org_id) REFERENCES orgs(org_id) not valid;

alter table "public"."org_coaches" validate constraint "org_coaches_org_id_fkey";

alter table "public"."superadmins" add constraint "admins_admin_id_fkey" FOREIGN KEY (superadmin_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."superadmins" validate constraint "admins_admin_id_fkey";

grant delete on table "public"."host_admins" to "anon";

grant insert on table "public"."host_admins" to "anon";

grant references on table "public"."host_admins" to "anon";

grant select on table "public"."host_admins" to "anon";

grant trigger on table "public"."host_admins" to "anon";

grant truncate on table "public"."host_admins" to "anon";

grant update on table "public"."host_admins" to "anon";

grant delete on table "public"."host_admins" to "authenticated";

grant insert on table "public"."host_admins" to "authenticated";

grant references on table "public"."host_admins" to "authenticated";

grant select on table "public"."host_admins" to "authenticated";

grant trigger on table "public"."host_admins" to "authenticated";

grant truncate on table "public"."host_admins" to "authenticated";

grant update on table "public"."host_admins" to "authenticated";

grant delete on table "public"."host_admins" to "service_role";

grant insert on table "public"."host_admins" to "service_role";

grant references on table "public"."host_admins" to "service_role";

grant select on table "public"."host_admins" to "service_role";

grant trigger on table "public"."host_admins" to "service_role";

grant truncate on table "public"."host_admins" to "service_role";

grant update on table "public"."host_admins" to "service_role";

grant delete on table "public"."org_coaches" to "anon";

grant insert on table "public"."org_coaches" to "anon";

grant references on table "public"."org_coaches" to "anon";

grant select on table "public"."org_coaches" to "anon";

grant trigger on table "public"."org_coaches" to "anon";

grant truncate on table "public"."org_coaches" to "anon";

grant update on table "public"."org_coaches" to "anon";

grant delete on table "public"."org_coaches" to "authenticated";

grant insert on table "public"."org_coaches" to "authenticated";

grant references on table "public"."org_coaches" to "authenticated";

grant select on table "public"."org_coaches" to "authenticated";

grant trigger on table "public"."org_coaches" to "authenticated";

grant truncate on table "public"."org_coaches" to "authenticated";

grant update on table "public"."org_coaches" to "authenticated";

grant delete on table "public"."org_coaches" to "service_role";

grant insert on table "public"."org_coaches" to "service_role";

grant references on table "public"."org_coaches" to "service_role";

grant select on table "public"."org_coaches" to "service_role";

grant trigger on table "public"."org_coaches" to "service_role";

grant truncate on table "public"."org_coaches" to "service_role";

grant update on table "public"."org_coaches" to "service_role";

grant delete on table "public"."superadmins" to "anon";

grant insert on table "public"."superadmins" to "anon";

grant references on table "public"."superadmins" to "anon";

grant select on table "public"."superadmins" to "anon";

grant trigger on table "public"."superadmins" to "anon";

grant truncate on table "public"."superadmins" to "anon";

grant update on table "public"."superadmins" to "anon";

grant delete on table "public"."superadmins" to "authenticated";

grant insert on table "public"."superadmins" to "authenticated";

grant references on table "public"."superadmins" to "authenticated";

grant select on table "public"."superadmins" to "authenticated";

grant trigger on table "public"."superadmins" to "authenticated";

grant truncate on table "public"."superadmins" to "authenticated";

grant update on table "public"."superadmins" to "authenticated";

grant delete on table "public"."superadmins" to "service_role";

grant insert on table "public"."superadmins" to "service_role";

grant references on table "public"."superadmins" to "service_role";

grant select on table "public"."superadmins" to "service_role";

grant trigger on table "public"."superadmins" to "service_role";

grant truncate on table "public"."superadmins" to "service_role";

grant update on table "public"."superadmins" to "service_role";

create policy "Admin can delete items"
on "public"."superadmins"
as permissive
for delete
to public
using ((( SELECT count(admins_1.superadmin_id) AS count
   FROM superadmins admins_1
  WHERE (admins_1.superadmin_id = auth.uid())) >= 1));


create policy "Admin can insert items"
on "public"."superadmins"
as permissive
for insert
to public
with check ((( SELECT count(admins_1.superadmin_id) AS count
   FROM superadmins admins_1
  WHERE (admins_1.superadmin_id = auth.uid())) >= 1));


create policy "Enable read access for all users"
on "public"."superadmins"
as permissive
for select
to public
using (true);


create policy "Admins can read"
on "public"."custom_fields"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) IN ( SELECT superadmins.superadmin_id AS admin_id
   FROM superadmins)));


create policy "Admin can do anything"
on "public"."events"
as permissive
for all
to public
using ((( SELECT count(superadmins.superadmin_id) AS count
   FROM superadmins
  WHERE (superadmins.superadmin_id = auth.uid())) >= 1));


create policy "Admins can do anything"
on "public"."graded_answers"
as permissive
for all
to public
using ((( SELECT count(superadmins.superadmin_id) AS count
   FROM superadmins
  WHERE (superadmins.superadmin_id = auth.uid())) >= 1));


create policy "Admins can do anything"
on "public"."problem_clarifications"
as permissive
for all
to public
using ((( SELECT count(superadmins.superadmin_id) AS count
   FROM superadmins
  WHERE (superadmins.superadmin_id = auth.uid())) >= 1));


create policy "Admins can do anything"
on "public"."problems"
as permissive
for all
to public
using ((( SELECT count(superadmins.superadmin_id) AS count
   FROM superadmins
  WHERE (superadmins.superadmin_id = auth.uid())) >= 1));


create policy "Admins can do anything"
on "public"."student_teams"
as permissive
for all
to public
using ((( SELECT count(superadmins.superadmin_id) AS count
   FROM superadmins
  WHERE (superadmins.superadmin_id = auth.uid())) >= 1));


create policy "Admins can do anything"
on "public"."students"
as permissive
for all
to public
using ((( SELECT count(superadmins.superadmin_id) AS count
   FROM superadmins
  WHERE (superadmins.superadmin_id = auth.uid())) >= 1));


create policy "Admins can do anything"
on "public"."teams"
as permissive
for all
to public
using ((( SELECT count(superadmins.superadmin_id) AS count
   FROM superadmins
  WHERE (superadmins.superadmin_id = auth.uid())) >= 1));


create policy "Admins can do anything"
on "public"."test_answers"
as permissive
for all
to public
using ((( SELECT count(superadmins.superadmin_id) AS count
   FROM superadmins
  WHERE (superadmins.superadmin_id = auth.uid())) >= 1));


create policy "Admins can do anything"
on "public"."test_problems"
as permissive
for all
to public
using ((( SELECT count(superadmins.superadmin_id) AS count
   FROM superadmins
  WHERE (superadmins.superadmin_id = auth.uid())) >= 1));


create policy "Admins can do anything"
on "public"."test_takers"
as permissive
for all
to public
using ((( SELECT count(superadmins.superadmin_id) AS count
   FROM superadmins
  WHERE (superadmins.superadmin_id = auth.uid())) >= 1));


create policy "Admins can do anything"
on "public"."tests"
as permissive
for all
to public
using ((( SELECT count(superadmins.superadmin_id) AS count
   FROM superadmins
  WHERE (superadmins.superadmin_id = auth.uid())) >= 1));
