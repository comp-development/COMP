insert into storage.buckets (id, name, public)
values ('scans', 'scans', true);

CREATE POLICY "owner host_admins can manipulate scans" ON storage.objects FOR ALL TO public USING (bucket_id = 'scans' and   (EXISTS ( SELECT 1
    FROM host_admins
    WHERE ((CAST(host_admins.host_id as text) = REGEXP_REPLACE(name, 'host_([^/]+)/.*', '\1') ) AND (host_admins.admin_id = auth.uid()) AND (host_admins.owner))))
);

create type "public"."grade" as enum ('Incorrect', 'Correct', 'Unsure');

create table "public"."scan_grades" (
    "grade_id" bigint generated by default as identity not null,
    "scan_id" bigint,
    "grader_id" uuid,
    "grade" grade,
    "test_problem_id" bigint,
    "created_at" timestamp with time zone default now(),
    "is_override" boolean default false
);


create table "public"."scans" (
    "scan_id" bigint generated by default as identity not null,
    "test_id" bigint,
    "taker_id" text,
    "scan_path" text,
    "page_number" smallint
);


CREATE UNIQUE INDEX answer_grades_pkey ON public.scan_grades USING btree (grade_id);

CREATE UNIQUE INDEX scans_pkey ON public.scans USING btree (scan_id);

CREATE UNIQUE INDEX unique_grader_scan_test_problem ON public.scan_grades USING btree (grader_id, scan_id, test_problem_id);

CREATE UNIQUE INDEX unique_scans ON public.scans USING btree (test_id, taker_id, page_number);

alter table "public"."scan_grades" add constraint "answer_grades_pkey" PRIMARY KEY using index "answer_grades_pkey";

alter table "public"."scans" add constraint "scans_pkey" PRIMARY KEY using index "scans_pkey";

alter table "public"."scan_grades" add constraint "public_grades_scan_id_fkey" FOREIGN KEY (scan_id) REFERENCES scans(scan_id) not valid;

alter table "public"."scan_grades" validate constraint "public_grades_scan_id_fkey";

alter table "public"."scan_grades" add constraint "public_grades_test_problem_id_fkey" FOREIGN KEY (test_problem_id) REFERENCES test_problems(test_problem_id) not valid;

alter table "public"."scan_grades" validate constraint "public_grades_test_problem_id_fkey";

alter table "public"."scan_grades" add constraint "public_response_grades_grader_id_fkey" FOREIGN KEY (grader_id) REFERENCES admins(admin_id) not valid;

alter table "public"."scan_grades" validate constraint "public_response_grades_grader_id_fkey";

alter table "public"."scan_grades" add constraint "unique_grader_scan_test_problem" UNIQUE using index "unique_grader_scan_test_problem";

alter table "public"."scans" add constraint "public_scans_test_id_fkey" FOREIGN KEY (test_id) REFERENCES tests(test_id) not valid;

alter table "public"."scans" validate constraint "public_scans_test_id_fkey";

alter table "public"."scans" add constraint "unique_scans" UNIQUE using index "unique_scans";

grant delete on table "public"."scan_grades" to "anon";

grant insert on table "public"."scan_grades" to "anon";

grant references on table "public"."scan_grades" to "anon";

grant select on table "public"."scan_grades" to "anon";

grant trigger on table "public"."scan_grades" to "anon";

grant truncate on table "public"."scan_grades" to "anon";

grant update on table "public"."scan_grades" to "anon";

grant delete on table "public"."scan_grades" to "authenticated";

grant insert on table "public"."scan_grades" to "authenticated";

grant references on table "public"."scan_grades" to "authenticated";

grant select on table "public"."scan_grades" to "authenticated";

grant trigger on table "public"."scan_grades" to "authenticated";

grant truncate on table "public"."scan_grades" to "authenticated";

grant update on table "public"."scan_grades" to "authenticated";

grant delete on table "public"."scan_grades" to "service_role";

grant insert on table "public"."scan_grades" to "service_role";

grant references on table "public"."scan_grades" to "service_role";

grant select on table "public"."scan_grades" to "service_role";

grant trigger on table "public"."scan_grades" to "service_role";

grant truncate on table "public"."scan_grades" to "service_role";

grant update on table "public"."scan_grades" to "service_role";

grant delete on table "public"."scans" to "anon";

grant insert on table "public"."scans" to "anon";

grant references on table "public"."scans" to "anon";

grant select on table "public"."scans" to "anon";

grant trigger on table "public"."scans" to "anon";

grant truncate on table "public"."scans" to "anon";

grant update on table "public"."scans" to "anon";

grant delete on table "public"."scans" to "authenticated";

grant insert on table "public"."scans" to "authenticated";

grant references on table "public"."scans" to "authenticated";

grant select on table "public"."scans" to "authenticated";

grant trigger on table "public"."scans" to "authenticated";

grant truncate on table "public"."scans" to "authenticated";

grant update on table "public"."scans" to "authenticated";

grant delete on table "public"."scans" to "service_role";

grant insert on table "public"."scans" to "service_role";

grant references on table "public"."scans" to "service_role";

grant select on table "public"."scans" to "service_role";

grant trigger on table "public"."scans" to "service_role";

grant truncate on table "public"."scans" to "service_role";

grant update on table "public"."scans" to "service_role";
