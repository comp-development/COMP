alter table "public"."custom_field_values" drop constraint "student_custom_fields_custom_field_id_fkey";

alter table "public"."custom_field_values" drop constraint "unique_custom_field_values";

alter table "public"."custom_fields" drop constraint "custom_fields_event_id_fkey";

drop view if exists "public"."graded_answer_count";

drop view if exists "public"."graded_test_answers";

drop index if exists "public"."unique_custom_field_values";

create table "public"."event_custom_fields" (
    "event_custom_field_id" bigint generated by default as identity not null,
    "custom_field_id" bigint not null,
    "event_id" bigint not null,
    "ordering" bigint not null
);


alter table "public"."event_custom_fields" enable row level security;

alter table "public"."custom_field_values" drop column "custom_field_id";

alter table "public"."custom_field_values" add column "event_custom_field_id" bigint not null;

alter table "public"."custom_field_values" add column "last_updated" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text);

alter table "public"."custom_fields" add column "host_id" bigint;

alter table "public"."teams" disable row level security;

alter table "public"."test_answers" drop column "last_edited_time";

alter table "public"."test_answers" add column "last_updated" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text);

CREATE UNIQUE INDEX event_custom_fields_pkey ON public.event_custom_fields USING btree (event_custom_field_id);

CREATE UNIQUE INDEX teams_event_org_teamname_uk ON public.teams USING btree (event_id, org_id, team_name);

CREATE UNIQUE INDEX unique_event_table_key ON public.custom_fields USING btree (event_id, custom_field_table, key);

CREATE UNIQUE INDEX unique_host_table_key ON public.custom_fields USING btree (host_id, custom_field_table, key);

CREATE UNIQUE INDEX unique_custom_field_values ON public.custom_field_values USING btree (event_custom_field_id, org_event_id, student_event_id, team_id);

alter table "public"."event_custom_fields" add constraint "event_custom_fields_pkey" PRIMARY KEY using index "event_custom_fields_pkey";

alter table "public"."custom_field_values" add constraint "custom_field_values_event_custom_field_id_fkey" FOREIGN KEY (event_custom_field_id) REFERENCES event_custom_fields(event_custom_field_id) not valid;

alter table "public"."custom_field_values" validate constraint "custom_field_values_event_custom_field_id_fkey";

alter table "public"."custom_fields" add constraint "custom_fields_host_id_fkey" FOREIGN KEY (host_id) REFERENCES hosts(host_id) ON DELETE SET NULL not valid;

alter table "public"."custom_fields" validate constraint "custom_fields_host_id_fkey";

alter table "public"."custom_fields" add constraint "unique_event_table_key" UNIQUE using index "unique_event_table_key";

alter table "public"."custom_fields" add constraint "unique_host_table_key" UNIQUE using index "unique_host_table_key";

alter table "public"."event_custom_fields" add constraint "event_custom_fields_custom_field_id_fkey" FOREIGN KEY (custom_field_id) REFERENCES custom_fields(custom_field_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."event_custom_fields" validate constraint "event_custom_fields_custom_field_id_fkey";

alter table "public"."event_custom_fields" add constraint "event_custom_fields_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(event_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."event_custom_fields" validate constraint "event_custom_fields_event_id_fkey";

alter table "public"."teams" add constraint "teams_event_org_teamname_uk" UNIQUE using index "teams_event_org_teamname_uk";

alter table "public"."custom_field_values" add constraint "unique_custom_field_values" UNIQUE using index "unique_custom_field_values";

alter table "public"."custom_fields" add constraint "custom_fields_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(event_id) not valid;

alter table "public"."custom_fields" validate constraint "custom_fields_event_id_fkey";

create or replace view "public"."graded_answer_count" as  SELECT ta.test_problem_id,
    tp.problem_id,
    ta.answer_latex,
    ga.graded_answer_id,
    ga.correct,
    count(ta.test_answer_id) AS count
   FROM ((test_answers ta
     JOIN test_problems tp ON ((ta.test_problem_id = tp.test_problem_id)))
     LEFT JOIN graded_answers ga ON (((tp.problem_id = ga.problem_id) AND (ta.answer_latex = ga.answer_latex))))
  GROUP BY ta.test_problem_id, tp.problem_id, ta.answer_latex, ga.graded_answer_id, ga.correct;


create or replace view "public"."graded_test_answers" as  SELECT ta.test_answer_id,
    ta.test_taker_id,
    ta.test_problem_id,
    ta.answer_latex,
    ga.correct,
    tp.problem_number AS test_problem_number,
    te.test_name,
    te.test_id,
    tp.page_number AS test_problem_page,
        CASE
            WHEN (ga.correct = true) THEN tp.points
            ELSE ((0)::bigint)::double precision
        END AS points,
    ta.last_updated AS last_edited_time
   FROM ((((test_answers ta
     JOIN test_problems tp ON ((ta.test_problem_id = tp.test_problem_id)))
     LEFT JOIN graded_answers ga ON (((tp.problem_id = ga.problem_id) AND (ta.answer_latex = ga.answer_latex))))
     JOIN test_takers tt ON ((ta.test_taker_id = tt.test_taker_id)))
     LEFT JOIN tests te ON ((tt.test_id = te.test_id)));


grant delete on table "public"."event_custom_fields" to "anon";

grant insert on table "public"."event_custom_fields" to "anon";

grant references on table "public"."event_custom_fields" to "anon";

grant select on table "public"."event_custom_fields" to "anon";

grant trigger on table "public"."event_custom_fields" to "anon";

grant truncate on table "public"."event_custom_fields" to "anon";

grant update on table "public"."event_custom_fields" to "anon";

grant delete on table "public"."event_custom_fields" to "authenticated";

grant insert on table "public"."event_custom_fields" to "authenticated";

grant references on table "public"."event_custom_fields" to "authenticated";

grant select on table "public"."event_custom_fields" to "authenticated";

grant trigger on table "public"."event_custom_fields" to "authenticated";

grant truncate on table "public"."event_custom_fields" to "authenticated";

grant update on table "public"."event_custom_fields" to "authenticated";

grant delete on table "public"."event_custom_fields" to "service_role";

grant insert on table "public"."event_custom_fields" to "service_role";

grant references on table "public"."event_custom_fields" to "service_role";

grant select on table "public"."event_custom_fields" to "service_role";

grant trigger on table "public"."event_custom_fields" to "service_role";

grant truncate on table "public"."event_custom_fields" to "service_role";

grant update on table "public"."event_custom_fields" to "service_role";



